/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.fhir

import com.google.android.fhir.db.impl.entities.LocalChangeToken
import com.google.android.fhir.sync.ConflictResolver
import java.time.OffsetDateTime
import kotlinx.coroutines.flow.Flow
import org.hl7.fhir.r4.model.Resource

/** The FHIR Engine interface that handles the local storage of FHIR resources. */
interface FhirEngine<R, T, S> {
  /**
   * Creates one or more FHIR [resource]s in the local storage.
   *
   * @return the logical IDs of the newly created resources.
   */
  suspend fun create(vararg resource: R): List<String>

  /** Loads a FHIR resource given the class and the logical ID. */
  suspend fun get(type: T, id: String): R

  /** Updates a FHIR [resource] in the local storage. */
  suspend fun update(vararg resource: R)

  /** Removes a FHIR resource given the class and the logical ID. */
  suspend fun delete(type: T, id: String)

  /**
   * Searches the database and returns a list resources according to the [search] specifications.
   */
  suspend fun <Q : R> search(search: S): List<Q>

  /**
   * Synchronizes the [upload] result in the database. [upload] operation may result in multiple
   * calls to the server to upload the data. Result of each call will be emitted by [upload] and the
   * api caller should [Flow.collect] it.
   */
  suspend fun syncUpload(upload: (suspend (List<LocalChange>) -> Flow<Pair<LocalChangeToken, R>>))

  /**
   * Synchronizes the [download] result in the database. The database will be updated to reflect the
   * result of the [download] operation.
   */
  suspend fun syncDownload(
    conflictResolver: ConflictResolver,
    download: suspend (SyncDownloadContext<T>) -> Flow<List<R>>
  )

  /**
   * Returns the total count of entities available for given search.
   *
   * @param search
   */
  suspend fun count(search: S): Long

  /** Returns the timestamp when data was last synchronized. */
  suspend fun getLastSyncTimeStamp(): OffsetDateTime?

  /**
   * Clears all database tables without resetting the auto-increment value generated by
   * PrimaryKey.autoGenerate.
   *
   * WARNING: This will clear the database and it's not recoverable.
   */
  suspend fun clearDatabase()

  /**
   * Retrieve [LocalChange] for [Resource] with given type and id, which can be used to purge
   * resource from database. Each resource will have at most one
   * [LocalChange](multiple
   * changes are squashed). If there is no local change for given [T]
   * and [Resource.id], return `null`.
   * @param type The [T]
   * @param id The resource id [Resource.id]
   * @return [LocalChange] A squashed local changes for given [T] and [Resource.id] . If there is no
   * local change for given [T] and [Resource.id], return `null`.
   */
  suspend fun getLocalChange(type: T, id: String): LocalChange?

  /**
   * Purges a resource from the database based on resource type and id without any deletion of data
   * from the server.
   * @param type The [T]
   * @param id The resource id [Resource.id]
   * @param isLocalPurge default value is false here resource will not be deleted from
   * LocalChangeEntity table but it will throw IllegalStateException("Resource has local changes
   * either sync with server or FORCE_PURGE required") if local change exists. If true this API will
   * delete resource entry from LocalChangeEntity table.
   */
  suspend fun purge(type: T, id: String, forcePurge: Boolean = false)
}

interface SyncDownloadContext<T> {
  suspend fun getLatestTimestampFor(type: T): String?
}
