/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.fhir.index

import kotlin.collections.List
import org.hl7.fhir.r4.model.Enumerations
import org.hl7.fhir.r4.model.Resource

/**
 * This File is Generated from com.google.android.fhir.codegen.SearchParameterRepositoryGenerator
 * all changes to this file must be made through the aforementioned file only
 */
internal fun getSearchParamList(resource: Resource): List<SearchParamDefinition> =
  when (resource.fhirType()) {
    "Appointment" ->
      listOf(
        SearchParamDefinition(
          "actor",
          Enumerations.SearchParamType.REFERENCE,
          "Appointment.participant.actor"
        ),
        SearchParamDefinition(
          "appointment-type",
          Enumerations.SearchParamType.TOKEN,
          "Appointment.appointmentType"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "Appointment.basedOn"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Appointment.start"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Appointment.identifier"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "Appointment.participant.actor.where(resolve() is Location)"
        ),
        SearchParamDefinition(
          "part-status",
          Enumerations.SearchParamType.TOKEN,
          "Appointment.participant.status"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Appointment.participant.actor.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "practitioner",
          Enumerations.SearchParamType.REFERENCE,
          "Appointment.participant.actor.where(resolve() is Practitioner)"
        ),
        SearchParamDefinition(
          "reason-code",
          Enumerations.SearchParamType.TOKEN,
          "Appointment.reasonCode"
        ),
        SearchParamDefinition(
          "reason-reference",
          Enumerations.SearchParamType.REFERENCE,
          "Appointment.reasonReference"
        ),
        SearchParamDefinition(
          "service-category",
          Enumerations.SearchParamType.TOKEN,
          "Appointment.serviceCategory"
        ),
        SearchParamDefinition(
          "service-type",
          Enumerations.SearchParamType.TOKEN,
          "Appointment.serviceType"
        ),
        SearchParamDefinition("slot", Enumerations.SearchParamType.REFERENCE, "Appointment.slot"),
        SearchParamDefinition(
          "specialty",
          Enumerations.SearchParamType.TOKEN,
          "Appointment.specialty"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Appointment.status"),
        SearchParamDefinition(
          "supporting-info",
          Enumerations.SearchParamType.REFERENCE,
          "Appointment.supportingInformation"
        ),
      )
    "Account" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Account.identifier"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Account.name"),
        SearchParamDefinition("owner", Enumerations.SearchParamType.REFERENCE, "Account.owner"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Account.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("period", Enumerations.SearchParamType.DATE, "Account.servicePeriod"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Account.status"),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "Account.subject"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Account.type"),
      )
    "Invoice" ->
      listOf(
        SearchParamDefinition("account", Enumerations.SearchParamType.REFERENCE, "Invoice.account"),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Invoice.date"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Invoice.identifier"
        ),
        SearchParamDefinition("issuer", Enumerations.SearchParamType.REFERENCE, "Invoice.issuer"),
        SearchParamDefinition(
          "participant",
          Enumerations.SearchParamType.REFERENCE,
          "Invoice.participant.actor"
        ),
        SearchParamDefinition(
          "participant-role",
          Enumerations.SearchParamType.TOKEN,
          "Invoice.participant.role"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Invoice.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "recipient",
          Enumerations.SearchParamType.REFERENCE,
          "Invoice.recipient"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Invoice.status"),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "Invoice.subject"),
        SearchParamDefinition(
          "totalgross",
          Enumerations.SearchParamType.QUANTITY,
          "Invoice.totalGross"
        ),
        SearchParamDefinition(
          "totalnet",
          Enumerations.SearchParamType.QUANTITY,
          "Invoice.totalNet"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Invoice.type"),
      )
    "EventDefinition" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "EventDefinition.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(EventDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(EventDefinition.useContext.value as Quantity) | (EventDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "EventDefinition.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "EventDefinition.date"),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "EventDefinition.relatedArtifact.where(type='depends-on').resource"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "EventDefinition.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "EventDefinition.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "EventDefinition.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "EventDefinition.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "EventDefinition.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "EventDefinition.name"),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "EventDefinition.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "EventDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "EventDefinition.status"
        ),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "EventDefinition.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "EventDefinition.title"
        ),
        SearchParamDefinition("topic", Enumerations.SearchParamType.TOKEN, "EventDefinition.topic"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "EventDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "EventDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "EventDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "EventDefinition.useContext"
        ),
      )
    "DocumentManifest" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DocumentManifest.masterIdentifier | DocumentManifest.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentManifest.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "DocumentManifest.type"),
        SearchParamDefinition(
          "author",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentManifest.author"
        ),
        SearchParamDefinition(
          "created",
          Enumerations.SearchParamType.DATE,
          "DocumentManifest.created"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "DocumentManifest.description"
        ),
        SearchParamDefinition(
          "item",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentManifest.content"
        ),
        SearchParamDefinition(
          "recipient",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentManifest.recipient"
        ),
        SearchParamDefinition(
          "related-id",
          Enumerations.SearchParamType.TOKEN,
          "DocumentManifest.related.identifier"
        ),
        SearchParamDefinition(
          "related-ref",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentManifest.related.ref"
        ),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.URI,
          "DocumentManifest.source"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "DocumentManifest.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentManifest.subject"
        ),
      )
    "MessageDefinition" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(MessageDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "MessageDefinition.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "MessageDefinition.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "MessageDefinition.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "MessageDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "MessageDefinition.title"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "MessageDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "MessageDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "MessageDefinition.useContext"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.identifier"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.category"
        ),
        SearchParamDefinition(
          "event",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.event"
        ),
        SearchParamDefinition(
          "focus",
          Enumerations.SearchParamType.TOKEN,
          "MessageDefinition.focus.code"
        ),
        SearchParamDefinition(
          "parent",
          Enumerations.SearchParamType.REFERENCE,
          "MessageDefinition.parent"
        ),
      )
    "Goal" ->
      listOf(
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Goal.identifier"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Goal.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "achievement-status",
          Enumerations.SearchParamType.TOKEN,
          "Goal.achievementStatus"
        ),
        SearchParamDefinition("category", Enumerations.SearchParamType.TOKEN, "Goal.category"),
        SearchParamDefinition(
          "lifecycle-status",
          Enumerations.SearchParamType.TOKEN,
          "Goal.lifecycleStatus"
        ),
        SearchParamDefinition(
          "start-date",
          Enumerations.SearchParamType.DATE,
          "(Goal.start as date)"
        ),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "Goal.subject"),
        SearchParamDefinition(
          "target-date",
          Enumerations.SearchParamType.DATE,
          "(Goal.target.due as date)"
        ),
      )
    "MedicinalProductPackaged" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProductPackaged.identifier"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicinalProductPackaged.subject"
        ),
      )
    "Endpoint" ->
      listOf(
        SearchParamDefinition(
          "connection-type",
          Enumerations.SearchParamType.TOKEN,
          "Endpoint.connectionType"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Endpoint.identifier"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Endpoint.name"),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "Endpoint.managingOrganization"
        ),
        SearchParamDefinition(
          "payload-type",
          Enumerations.SearchParamType.TOKEN,
          "Endpoint.payloadType"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Endpoint.status"),
      )
    "EnrollmentRequest" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "EnrollmentRequest.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "EnrollmentRequest.candidate"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "EnrollmentRequest.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "EnrollmentRequest.candidate"
        ),
      )
    "Consent" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Consent.dateTime"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Consent.identifier"
        ),
        SearchParamDefinition("patient", Enumerations.SearchParamType.REFERENCE, "Consent.patient"),
        SearchParamDefinition(
          "action",
          Enumerations.SearchParamType.TOKEN,
          "Consent.provision.action"
        ),
        SearchParamDefinition(
          "actor",
          Enumerations.SearchParamType.REFERENCE,
          "Consent.provision.actor.reference"
        ),
        SearchParamDefinition("category", Enumerations.SearchParamType.TOKEN, "Consent.category"),
        SearchParamDefinition(
          "consentor",
          Enumerations.SearchParamType.REFERENCE,
          "Consent.performer"
        ),
        SearchParamDefinition(
          "data",
          Enumerations.SearchParamType.REFERENCE,
          "Consent.provision.data.reference"
        ),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "Consent.organization"
        ),
        SearchParamDefinition(
          "period",
          Enumerations.SearchParamType.DATE,
          "Consent.provision.period"
        ),
        SearchParamDefinition(
          "purpose",
          Enumerations.SearchParamType.TOKEN,
          "Consent.provision.purpose"
        ),
        SearchParamDefinition("scope", Enumerations.SearchParamType.TOKEN, "Consent.scope"),
        SearchParamDefinition(
          "security-label",
          Enumerations.SearchParamType.TOKEN,
          "Consent.provision.securityLabel"
        ),
        SearchParamDefinition(
          "source-reference",
          Enumerations.SearchParamType.REFERENCE,
          "Consent.source"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Consent.status"),
      )
    "Medication" ->
      listOf(
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "Medication.code"),
        SearchParamDefinition(
          "expiration-date",
          Enumerations.SearchParamType.DATE,
          "Medication.batch.expirationDate"
        ),
        SearchParamDefinition("form", Enumerations.SearchParamType.TOKEN, "Medication.form"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Medication.identifier"
        ),
        SearchParamDefinition(
          "ingredient",
          Enumerations.SearchParamType.REFERENCE,
          "(Medication.ingredient.item as Reference)"
        ),
        SearchParamDefinition(
          "ingredient-code",
          Enumerations.SearchParamType.TOKEN,
          "(Medication.ingredient.item as CodeableConcept)"
        ),
        SearchParamDefinition(
          "lot-number",
          Enumerations.SearchParamType.TOKEN,
          "Medication.batch.lotNumber"
        ),
        SearchParamDefinition(
          "manufacturer",
          Enumerations.SearchParamType.REFERENCE,
          "Medication.manufacturer"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Medication.status"),
      )
    "CapabilityStatement" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(CapabilityStatement.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "CapabilityStatement.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "CapabilityStatement.description"
        ),
        SearchParamDefinition(
          "fhirversion",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.version"
        ),
        SearchParamDefinition(
          "format",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.format"
        ),
        SearchParamDefinition(
          "guide",
          Enumerations.SearchParamType.REFERENCE,
          "CapabilityStatement.implementationGuide"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.jurisdiction"
        ),
        SearchParamDefinition(
          "mode",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.rest.mode"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "CapabilityStatement.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "CapabilityStatement.publisher"
        ),
        SearchParamDefinition(
          "resource",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.rest.resource.type"
        ),
        SearchParamDefinition(
          "resource-profile",
          Enumerations.SearchParamType.REFERENCE,
          "CapabilityStatement.rest.resource.profile"
        ),
        SearchParamDefinition(
          "security-service",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.rest.security.service"
        ),
        SearchParamDefinition(
          "software",
          Enumerations.SearchParamType.STRING,
          "CapabilityStatement.software.name"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.status"
        ),
        SearchParamDefinition(
          "supported-profile",
          Enumerations.SearchParamType.REFERENCE,
          "CapabilityStatement.rest.resource.supportedProfile"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "CapabilityStatement.title"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "CapabilityStatement.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "CapabilityStatement.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "CapabilityStatement.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "CapabilityStatement.useContext"
        ),
      )
    "Measure" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "Measure.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(Measure.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(Measure.useContext.value as Quantity) | (Measure.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "Measure.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Measure.date"),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "Measure.relatedArtifact.where(type='depends-on').resource | Measure.library"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "Measure.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "Measure.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "Measure.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Measure.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "Measure.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Measure.name"),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "Measure.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "Measure.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Measure.status"),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "Measure.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "Measure.title"),
        SearchParamDefinition("topic", Enumerations.SearchParamType.TOKEN, "Measure.topic"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "Measure.url"),
        SearchParamDefinition("version", Enumerations.SearchParamType.TOKEN, "Measure.version"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "Measure.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "Measure.useContext"
        ),
      )
    "ResearchSubject" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ResearchSubject.period"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ResearchSubject.identifier"
        ),
        SearchParamDefinition(
          "individual",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchSubject.individual"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchSubject.individual"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ResearchSubject.status"
        ),
        SearchParamDefinition(
          "study",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchSubject.study"
        ),
      )
    "Subscription" ->
      listOf(
        SearchParamDefinition(
          "contact",
          Enumerations.SearchParamType.TOKEN,
          "Subscription.contact"
        ),
        SearchParamDefinition(
          "criteria",
          Enumerations.SearchParamType.STRING,
          "Subscription.criteria"
        ),
        SearchParamDefinition(
          "payload",
          Enumerations.SearchParamType.TOKEN,
          "Subscription.channel.payload"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Subscription.status"),
        SearchParamDefinition(
          "type",
          Enumerations.SearchParamType.TOKEN,
          "Subscription.channel.type"
        ),
        SearchParamDefinition(
          "url",
          Enumerations.SearchParamType.URI,
          "Subscription.channel.endpoint"
        ),
      )
    "DocumentReference" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.masterIdentifier | DocumentReference.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "DocumentReference.type"),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.context.encounter"
        ),
        SearchParamDefinition(
          "authenticator",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.authenticator"
        ),
        SearchParamDefinition(
          "author",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.author"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.category"
        ),
        SearchParamDefinition(
          "contenttype",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.content.attachment.contentType"
        ),
        SearchParamDefinition(
          "custodian",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.custodian"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "DocumentReference.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "DocumentReference.description"
        ),
        SearchParamDefinition(
          "event",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.context.event"
        ),
        SearchParamDefinition(
          "facility",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.context.facilityType"
        ),
        SearchParamDefinition(
          "format",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.content.format"
        ),
        SearchParamDefinition(
          "language",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.content.attachment.language"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.URI,
          "DocumentReference.content.attachment.url"
        ),
        SearchParamDefinition(
          "period",
          Enumerations.SearchParamType.DATE,
          "DocumentReference.context.period"
        ),
        SearchParamDefinition(
          "related",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.context.related"
        ),
        SearchParamDefinition(
          "relatesto",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.relatesTo.target"
        ),
        SearchParamDefinition(
          "relation",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.relatesTo.code"
        ),
        SearchParamDefinition(
          "security-label",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.securityLabel"
        ),
        SearchParamDefinition(
          "setting",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.context.practiceSetting"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "DocumentReference.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "DocumentReference.subject"
        ),
        SearchParamDefinition(
          "relationship",
          Enumerations.SearchParamType.COMPOSITE,
          "DocumentReference.relatesTo"
        ),
      )
    "GraphDefinition" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(GraphDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "GraphDefinition.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "GraphDefinition.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "GraphDefinition.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "GraphDefinition.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "GraphDefinition.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "GraphDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "GraphDefinition.status"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "GraphDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "GraphDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "GraphDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "GraphDefinition.useContext"
        ),
        SearchParamDefinition("start", Enumerations.SearchParamType.TOKEN, "GraphDefinition.start"),
      )
    "CoverageEligibilityResponse" ->
      listOf(
        SearchParamDefinition(
          "created",
          Enumerations.SearchParamType.DATE,
          "CoverageEligibilityResponse.created"
        ),
        SearchParamDefinition(
          "disposition",
          Enumerations.SearchParamType.STRING,
          "CoverageEligibilityResponse.disposition"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "CoverageEligibilityResponse.identifier"
        ),
        SearchParamDefinition(
          "insurer",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityResponse.insurer"
        ),
        SearchParamDefinition(
          "outcome",
          Enumerations.SearchParamType.TOKEN,
          "CoverageEligibilityResponse.outcome"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityResponse.patient"
        ),
        SearchParamDefinition(
          "request",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityResponse.request"
        ),
        SearchParamDefinition(
          "requestor",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityResponse.requestor"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "CoverageEligibilityResponse.status"
        ),
      )
    "MeasureReport" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "MeasureReport.date"),
        SearchParamDefinition(
          "evaluated-resource",
          Enumerations.SearchParamType.REFERENCE,
          "MeasureReport.evaluatedResource"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MeasureReport.identifier"
        ),
        SearchParamDefinition(
          "measure",
          Enumerations.SearchParamType.REFERENCE,
          "MeasureReport.measure"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "MeasureReport.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("period", Enumerations.SearchParamType.DATE, "MeasureReport.period"),
        SearchParamDefinition(
          "reporter",
          Enumerations.SearchParamType.REFERENCE,
          "MeasureReport.reporter"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "MeasureReport.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MeasureReport.subject"
        ),
      )
    "PractitionerRole" ->
      listOf(
        SearchParamDefinition(
          "email",
          Enumerations.SearchParamType.TOKEN,
          "PractitionerRole.telecom.where(system='email')"
        ),
        SearchParamDefinition(
          "phone",
          Enumerations.SearchParamType.TOKEN,
          "PractitionerRole.telecom.where(system='phone')"
        ),
        SearchParamDefinition(
          "telecom",
          Enumerations.SearchParamType.TOKEN,
          "PractitionerRole.telecom"
        ),
        SearchParamDefinition(
          "active",
          Enumerations.SearchParamType.TOKEN,
          "PractitionerRole.active"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "PractitionerRole.period"),
        SearchParamDefinition(
          "endpoint",
          Enumerations.SearchParamType.REFERENCE,
          "PractitionerRole.endpoint"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "PractitionerRole.identifier"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "PractitionerRole.location"
        ),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "PractitionerRole.organization"
        ),
        SearchParamDefinition(
          "practitioner",
          Enumerations.SearchParamType.REFERENCE,
          "PractitionerRole.practitioner"
        ),
        SearchParamDefinition("role", Enumerations.SearchParamType.TOKEN, "PractitionerRole.code"),
        SearchParamDefinition(
          "service",
          Enumerations.SearchParamType.REFERENCE,
          "PractitionerRole.healthcareService"
        ),
        SearchParamDefinition(
          "specialty",
          Enumerations.SearchParamType.TOKEN,
          "PractitionerRole.specialty"
        ),
      )
    "ServiceRequest" ->
      listOf(
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "ServiceRequest.code"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.encounter"
        ),
        SearchParamDefinition(
          "authored",
          Enumerations.SearchParamType.DATE,
          "ServiceRequest.authoredOn"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.basedOn"
        ),
        SearchParamDefinition(
          "body-site",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.bodySite"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.category"
        ),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "ServiceRequest.instantiatesUri"
        ),
        SearchParamDefinition(
          "intent",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.intent"
        ),
        SearchParamDefinition(
          "occurrence",
          Enumerations.SearchParamType.DATE,
          "ServiceRequest.occurrence"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.performer"
        ),
        SearchParamDefinition(
          "performer-type",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.performerType"
        ),
        SearchParamDefinition(
          "priority",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.priority"
        ),
        SearchParamDefinition(
          "replaces",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.replaces"
        ),
        SearchParamDefinition(
          "requester",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.requester"
        ),
        SearchParamDefinition(
          "requisition",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.requisition"
        ),
        SearchParamDefinition(
          "specimen",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.specimen"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ServiceRequest.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "ServiceRequest.subject"
        ),
      )
    "RelatedPerson" ->
      listOf(
        SearchParamDefinition(
          "address",
          Enumerations.SearchParamType.STRING,
          "RelatedPerson.address"
        ),
        SearchParamDefinition(
          "address-city",
          Enumerations.SearchParamType.STRING,
          "RelatedPerson.address.city"
        ),
        SearchParamDefinition(
          "address-country",
          Enumerations.SearchParamType.STRING,
          "RelatedPerson.address.country"
        ),
        SearchParamDefinition(
          "address-postalcode",
          Enumerations.SearchParamType.STRING,
          "RelatedPerson.address.postalCode"
        ),
        SearchParamDefinition(
          "address-state",
          Enumerations.SearchParamType.STRING,
          "RelatedPerson.address.state"
        ),
        SearchParamDefinition(
          "address-use",
          Enumerations.SearchParamType.TOKEN,
          "RelatedPerson.address.use"
        ),
        SearchParamDefinition(
          "birthdate",
          Enumerations.SearchParamType.DATE,
          "RelatedPerson.birthDate"
        ),
        SearchParamDefinition(
          "email",
          Enumerations.SearchParamType.TOKEN,
          "RelatedPerson.telecom.where(system='email')"
        ),
        SearchParamDefinition("gender", Enumerations.SearchParamType.TOKEN, "RelatedPerson.gender"),
        SearchParamDefinition(
          "phone",
          Enumerations.SearchParamType.TOKEN,
          "RelatedPerson.telecom.where(system='phone')"
        ),
        SearchParamDefinition(
          "phonetic",
          Enumerations.SearchParamType.STRING,
          "RelatedPerson.name"
        ),
        SearchParamDefinition(
          "telecom",
          Enumerations.SearchParamType.TOKEN,
          "RelatedPerson.telecom"
        ),
        SearchParamDefinition("active", Enumerations.SearchParamType.TOKEN, "RelatedPerson.active"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "RelatedPerson.identifier"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "RelatedPerson.name"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "RelatedPerson.patient"
        ),
        SearchParamDefinition(
          "relationship",
          Enumerations.SearchParamType.TOKEN,
          "RelatedPerson.relationship"
        ),
      )
    "SupplyRequest" ->
      listOf(
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "SupplyRequest.authoredOn"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "SupplyRequest.identifier"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "SupplyRequest.category"
        ),
        SearchParamDefinition(
          "requester",
          Enumerations.SearchParamType.REFERENCE,
          "SupplyRequest.requester"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "SupplyRequest.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "SupplyRequest.deliverTo"
        ),
        SearchParamDefinition(
          "supplier",
          Enumerations.SearchParamType.REFERENCE,
          "SupplyRequest.supplier"
        ),
      )
    "Practitioner" ->
      listOf(
        SearchParamDefinition(
          "address",
          Enumerations.SearchParamType.STRING,
          "Practitioner.address"
        ),
        SearchParamDefinition(
          "address-city",
          Enumerations.SearchParamType.STRING,
          "Practitioner.address.city"
        ),
        SearchParamDefinition(
          "address-country",
          Enumerations.SearchParamType.STRING,
          "Practitioner.address.country"
        ),
        SearchParamDefinition(
          "address-postalcode",
          Enumerations.SearchParamType.STRING,
          "Practitioner.address.postalCode"
        ),
        SearchParamDefinition(
          "address-state",
          Enumerations.SearchParamType.STRING,
          "Practitioner.address.state"
        ),
        SearchParamDefinition(
          "address-use",
          Enumerations.SearchParamType.TOKEN,
          "Practitioner.address.use"
        ),
        SearchParamDefinition(
          "email",
          Enumerations.SearchParamType.TOKEN,
          "Practitioner.telecom.where(system='email')"
        ),
        SearchParamDefinition(
          "family",
          Enumerations.SearchParamType.STRING,
          "Practitioner.name.family"
        ),
        SearchParamDefinition("gender", Enumerations.SearchParamType.TOKEN, "Practitioner.gender"),
        SearchParamDefinition(
          "given",
          Enumerations.SearchParamType.STRING,
          "Practitioner.name.given"
        ),
        SearchParamDefinition(
          "phone",
          Enumerations.SearchParamType.TOKEN,
          "Practitioner.telecom.where(system='phone')"
        ),
        SearchParamDefinition("phonetic", Enumerations.SearchParamType.STRING, "Practitioner.name"),
        SearchParamDefinition(
          "telecom",
          Enumerations.SearchParamType.TOKEN,
          "Practitioner.telecom"
        ),
        SearchParamDefinition("active", Enumerations.SearchParamType.TOKEN, "Practitioner.active"),
        SearchParamDefinition(
          "communication",
          Enumerations.SearchParamType.TOKEN,
          "Practitioner.communication"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Practitioner.identifier"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Practitioner.name"),
      )
    "VerificationResult" ->
      listOf(
        SearchParamDefinition(
          "target",
          Enumerations.SearchParamType.REFERENCE,
          "VerificationResult.target"
        ),
      )
    "BodyStructure" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "BodyStructure.identifier"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.TOKEN,
          "BodyStructure.location"
        ),
        SearchParamDefinition(
          "morphology",
          Enumerations.SearchParamType.TOKEN,
          "BodyStructure.morphology"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "BodyStructure.patient"
        ),
      )
    "Slot" ->
      listOf(
        SearchParamDefinition(
          "appointment-type",
          Enumerations.SearchParamType.TOKEN,
          "Slot.appointmentType"
        ),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Slot.identifier"),
        SearchParamDefinition("schedule", Enumerations.SearchParamType.REFERENCE, "Slot.schedule"),
        SearchParamDefinition(
          "service-category",
          Enumerations.SearchParamType.TOKEN,
          "Slot.serviceCategory"
        ),
        SearchParamDefinition(
          "service-type",
          Enumerations.SearchParamType.TOKEN,
          "Slot.serviceType"
        ),
        SearchParamDefinition("specialty", Enumerations.SearchParamType.TOKEN, "Slot.specialty"),
        SearchParamDefinition("start", Enumerations.SearchParamType.DATE, "Slot.start"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Slot.status"),
      )
    "Contract" ->
      listOf(
        SearchParamDefinition(
          "authority",
          Enumerations.SearchParamType.REFERENCE,
          "Contract.authority"
        ),
        SearchParamDefinition("domain", Enumerations.SearchParamType.REFERENCE, "Contract.domain"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Contract.identifier"
        ),
        SearchParamDefinition(
          "instantiates",
          Enumerations.SearchParamType.URI,
          "Contract.instantiatesUri"
        ),
        SearchParamDefinition("issued", Enumerations.SearchParamType.DATE, "Contract.issued"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Contract.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "signer",
          Enumerations.SearchParamType.REFERENCE,
          "Contract.signer.party"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Contract.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Contract.subject"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "Contract.url"),
      )
    "Person" ->
      listOf(
        SearchParamDefinition("address", Enumerations.SearchParamType.STRING, "Person.address"),
        SearchParamDefinition(
          "address-city",
          Enumerations.SearchParamType.STRING,
          "Person.address.city"
        ),
        SearchParamDefinition(
          "address-country",
          Enumerations.SearchParamType.STRING,
          "Person.address.country"
        ),
        SearchParamDefinition(
          "address-postalcode",
          Enumerations.SearchParamType.STRING,
          "Person.address.postalCode"
        ),
        SearchParamDefinition(
          "address-state",
          Enumerations.SearchParamType.STRING,
          "Person.address.state"
        ),
        SearchParamDefinition(
          "address-use",
          Enumerations.SearchParamType.TOKEN,
          "Person.address.use"
        ),
        SearchParamDefinition("birthdate", Enumerations.SearchParamType.DATE, "Person.birthDate"),
        SearchParamDefinition(
          "email",
          Enumerations.SearchParamType.TOKEN,
          "Person.telecom.where(system='email')"
        ),
        SearchParamDefinition("gender", Enumerations.SearchParamType.TOKEN, "Person.gender"),
        SearchParamDefinition(
          "phone",
          Enumerations.SearchParamType.TOKEN,
          "Person.telecom.where(system='phone')"
        ),
        SearchParamDefinition("phonetic", Enumerations.SearchParamType.STRING, "Person.name"),
        SearchParamDefinition("telecom", Enumerations.SearchParamType.TOKEN, "Person.telecom"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Person.identifier"
        ),
        SearchParamDefinition("link", Enumerations.SearchParamType.REFERENCE, "Person.link.target"),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Person.name"),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "Person.managingOrganization"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Person.link.target.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "practitioner",
          Enumerations.SearchParamType.REFERENCE,
          "Person.link.target.where(resolve() is Practitioner)"
        ),
        SearchParamDefinition(
          "relatedperson",
          Enumerations.SearchParamType.REFERENCE,
          "Person.link.target.where(resolve() is RelatedPerson)"
        ),
      )
    "RiskAssessment" ->
      listOf(
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "(RiskAssessment.occurrence as dateTime)"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "RiskAssessment.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "RiskAssessment.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "RiskAssessment.encounter"
        ),
        SearchParamDefinition(
          "condition",
          Enumerations.SearchParamType.REFERENCE,
          "RiskAssessment.condition"
        ),
        SearchParamDefinition(
          "method",
          Enumerations.SearchParamType.TOKEN,
          "RiskAssessment.method"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "RiskAssessment.performer"
        ),
        SearchParamDefinition(
          "probability",
          Enumerations.SearchParamType.NUMBER,
          "RiskAssessment.prediction.probability"
        ),
        SearchParamDefinition(
          "risk",
          Enumerations.SearchParamType.TOKEN,
          "RiskAssessment.prediction.qualitativeRisk"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "RiskAssessment.subject"
        ),
      )
    "Group" ->
      listOf(
        SearchParamDefinition("actual", Enumerations.SearchParamType.TOKEN, "Group.actual"),
        SearchParamDefinition(
          "characteristic",
          Enumerations.SearchParamType.TOKEN,
          "Group.characteristic.code"
        ),
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "Group.code"),
        SearchParamDefinition(
          "exclude",
          Enumerations.SearchParamType.TOKEN,
          "Group.characteristic.exclude"
        ),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Group.identifier"),
        SearchParamDefinition(
          "managing-entity",
          Enumerations.SearchParamType.REFERENCE,
          "Group.managingEntity"
        ),
        SearchParamDefinition(
          "member",
          Enumerations.SearchParamType.REFERENCE,
          "Group.member.entity"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Group.type"),
        SearchParamDefinition(
          "value",
          Enumerations.SearchParamType.TOKEN,
          "(Group.characteristic.value as CodeableConcept) | (Group.characteristic.value as boolean)"
        ),
        SearchParamDefinition(
          "characteristic-value",
          Enumerations.SearchParamType.COMPOSITE,
          "Group.characteristic"
        ),
      )
    "PaymentNotice" ->
      listOf(
        SearchParamDefinition(
          "created",
          Enumerations.SearchParamType.DATE,
          "PaymentNotice.created"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "PaymentNotice.identifier"
        ),
        SearchParamDefinition(
          "payment-status",
          Enumerations.SearchParamType.TOKEN,
          "PaymentNotice.paymentStatus"
        ),
        SearchParamDefinition(
          "provider",
          Enumerations.SearchParamType.REFERENCE,
          "PaymentNotice.provider"
        ),
        SearchParamDefinition(
          "request",
          Enumerations.SearchParamType.REFERENCE,
          "PaymentNotice.request"
        ),
        SearchParamDefinition(
          "response",
          Enumerations.SearchParamType.REFERENCE,
          "PaymentNotice.response"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "PaymentNotice.status"),
      )
    "ResearchDefinition" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchDefinition.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ResearchDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ResearchDefinition.useContext.value as Quantity) | (ResearchDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ResearchDefinition.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ResearchDefinition.date"),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchDefinition.relatedArtifact.where(type='depends-on').resource | ResearchDefinition.library"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchDefinition.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "ResearchDefinition.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "ResearchDefinition.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ResearchDefinition.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ResearchDefinition.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "ResearchDefinition.name"
        ),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchDefinition.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ResearchDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ResearchDefinition.status"
        ),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchDefinition.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "ResearchDefinition.title"
        ),
        SearchParamDefinition(
          "topic",
          Enumerations.SearchParamType.TOKEN,
          "ResearchDefinition.topic"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "ResearchDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "ResearchDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ResearchDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ResearchDefinition.useContext"
        ),
      )
    "Organization" ->
      listOf(
        SearchParamDefinition("active", Enumerations.SearchParamType.TOKEN, "Organization.active"),
        SearchParamDefinition(
          "address",
          Enumerations.SearchParamType.STRING,
          "Organization.address"
        ),
        SearchParamDefinition(
          "address-city",
          Enumerations.SearchParamType.STRING,
          "Organization.address.city"
        ),
        SearchParamDefinition(
          "address-country",
          Enumerations.SearchParamType.STRING,
          "Organization.address.country"
        ),
        SearchParamDefinition(
          "address-postalcode",
          Enumerations.SearchParamType.STRING,
          "Organization.address.postalCode"
        ),
        SearchParamDefinition(
          "address-state",
          Enumerations.SearchParamType.STRING,
          "Organization.address.state"
        ),
        SearchParamDefinition(
          "address-use",
          Enumerations.SearchParamType.TOKEN,
          "Organization.address.use"
        ),
        SearchParamDefinition(
          "endpoint",
          Enumerations.SearchParamType.REFERENCE,
          "Organization.endpoint"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Organization.identifier"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "Organization.name | Organization.alias"
        ),
        SearchParamDefinition(
          "partof",
          Enumerations.SearchParamType.REFERENCE,
          "Organization.partOf"
        ),
        SearchParamDefinition("phonetic", Enumerations.SearchParamType.STRING, "Organization.name"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Organization.type"),
      )
    "CareTeam" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "CareTeam.period"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "CareTeam.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "CareTeam.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("category", Enumerations.SearchParamType.TOKEN, "CareTeam.category"),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "CareTeam.encounter"
        ),
        SearchParamDefinition(
          "participant",
          Enumerations.SearchParamType.REFERENCE,
          "CareTeam.participant.member"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "CareTeam.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "CareTeam.subject"
        ),
      )
    "ImplementationGuide" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ImplementationGuide.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ImplementationGuide.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "ImplementationGuide.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "ImplementationGuide.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ImplementationGuide.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "ImplementationGuide.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ImplementationGuide.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ImplementationGuide.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "ImplementationGuide.title"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "ImplementationGuide.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "ImplementationGuide.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ImplementationGuide.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ImplementationGuide.useContext"
        ),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "ImplementationGuide.dependsOn.uri"
        ),
        SearchParamDefinition(
          "experimental",
          Enumerations.SearchParamType.TOKEN,
          "ImplementationGuide.experimental"
        ),
        SearchParamDefinition(
          "global",
          Enumerations.SearchParamType.REFERENCE,
          "ImplementationGuide.global.profile"
        ),
        SearchParamDefinition(
          "resource",
          Enumerations.SearchParamType.REFERENCE,
          "ImplementationGuide.definition.resource.reference"
        ),
      )
    "ImagingStudy" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ImagingStudy.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "basedon",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.basedOn"
        ),
        SearchParamDefinition(
          "bodysite",
          Enumerations.SearchParamType.TOKEN,
          "ImagingStudy.series.bodySite"
        ),
        SearchParamDefinition(
          "dicom-class",
          Enumerations.SearchParamType.TOKEN,
          "ImagingStudy.series.instance.sopClass"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.encounter"
        ),
        SearchParamDefinition(
          "endpoint",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.endpoint | ImagingStudy.series.endpoint"
        ),
        SearchParamDefinition(
          "instance",
          Enumerations.SearchParamType.TOKEN,
          "ImagingStudy.series.instance.uid"
        ),
        SearchParamDefinition(
          "interpreter",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.interpreter"
        ),
        SearchParamDefinition(
          "modality",
          Enumerations.SearchParamType.TOKEN,
          "ImagingStudy.series.modality"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.series.performer.actor"
        ),
        SearchParamDefinition(
          "reason",
          Enumerations.SearchParamType.TOKEN,
          "ImagingStudy.reasonCode"
        ),
        SearchParamDefinition(
          "referrer",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.referrer"
        ),
        SearchParamDefinition(
          "series",
          Enumerations.SearchParamType.TOKEN,
          "ImagingStudy.series.uid"
        ),
        SearchParamDefinition("started", Enumerations.SearchParamType.DATE, "ImagingStudy.started"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "ImagingStudy.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "ImagingStudy.subject"
        ),
      )
    "FamilyMemberHistory" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "FamilyMemberHistory.condition.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "FamilyMemberHistory.date"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "FamilyMemberHistory.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "FamilyMemberHistory.patient"
        ),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "FamilyMemberHistory.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "FamilyMemberHistory.instantiatesUri"
        ),
        SearchParamDefinition(
          "relationship",
          Enumerations.SearchParamType.TOKEN,
          "FamilyMemberHistory.relationship"
        ),
        SearchParamDefinition("sex", Enumerations.SearchParamType.TOKEN, "FamilyMemberHistory.sex"),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "FamilyMemberHistory.status"
        ),
      )
    "ChargeItem" ->
      listOf(
        SearchParamDefinition(
          "account",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.account"
        ),
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "ChargeItem.code"),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.context"
        ),
        SearchParamDefinition(
          "entered-date",
          Enumerations.SearchParamType.DATE,
          "ChargeItem.enteredDate"
        ),
        SearchParamDefinition(
          "enterer",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.enterer"
        ),
        SearchParamDefinition(
          "factor-override",
          Enumerations.SearchParamType.NUMBER,
          "ChargeItem.factorOverride"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ChargeItem.identifier"
        ),
        SearchParamDefinition(
          "occurrence",
          Enumerations.SearchParamType.DATE,
          "ChargeItem.occurrence"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "performer-actor",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.performer.actor"
        ),
        SearchParamDefinition(
          "performer-function",
          Enumerations.SearchParamType.TOKEN,
          "ChargeItem.performer.function"
        ),
        SearchParamDefinition(
          "performing-organization",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.performingOrganization"
        ),
        SearchParamDefinition(
          "price-override",
          Enumerations.SearchParamType.QUANTITY,
          "ChargeItem.priceOverride"
        ),
        SearchParamDefinition(
          "quantity",
          Enumerations.SearchParamType.QUANTITY,
          "ChargeItem.quantity"
        ),
        SearchParamDefinition(
          "requesting-organization",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.requestingOrganization"
        ),
        SearchParamDefinition(
          "service",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.service"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "ChargeItem.subject"
        ),
      )
    "ResearchElementDefinition" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchElementDefinition.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ResearchElementDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ResearchElementDefinition.useContext.value as Quantity) | (ResearchElementDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ResearchElementDefinition.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "ResearchElementDefinition.date"
        ),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchElementDefinition.relatedArtifact.where(type='depends-on').resource | ResearchElementDefinition.library"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchElementDefinition.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "ResearchElementDefinition.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "ResearchElementDefinition.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ResearchElementDefinition.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ResearchElementDefinition.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "ResearchElementDefinition.name"
        ),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchElementDefinition.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ResearchElementDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ResearchElementDefinition.status"
        ),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchElementDefinition.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "ResearchElementDefinition.title"
        ),
        SearchParamDefinition(
          "topic",
          Enumerations.SearchParamType.TOKEN,
          "ResearchElementDefinition.topic"
        ),
        SearchParamDefinition(
          "url",
          Enumerations.SearchParamType.URI,
          "ResearchElementDefinition.url"
        ),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "ResearchElementDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ResearchElementDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ResearchElementDefinition.useContext"
        ),
      )
    "Encounter" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Encounter.period"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Encounter.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Encounter.type"),
        SearchParamDefinition(
          "account",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.account"
        ),
        SearchParamDefinition(
          "appointment",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.appointment"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.basedOn"
        ),
        SearchParamDefinition("class", Enumerations.SearchParamType.TOKEN, "Encounter.class"),
        SearchParamDefinition(
          "diagnosis",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.diagnosis.condition"
        ),
        SearchParamDefinition(
          "episode-of-care",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.episodeOfCare"
        ),
        SearchParamDefinition("length", Enumerations.SearchParamType.QUANTITY, "Encounter.length"),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.location.location"
        ),
        SearchParamDefinition(
          "location-period",
          Enumerations.SearchParamType.DATE,
          "Encounter.location.period"
        ),
        SearchParamDefinition(
          "part-of",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.partOf"
        ),
        SearchParamDefinition(
          "participant",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.participant.individual"
        ),
        SearchParamDefinition(
          "participant-type",
          Enumerations.SearchParamType.TOKEN,
          "Encounter.participant.type"
        ),
        SearchParamDefinition(
          "practitioner",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.participant.individual.where(resolve() is Practitioner)"
        ),
        SearchParamDefinition(
          "reason-code",
          Enumerations.SearchParamType.TOKEN,
          "Encounter.reasonCode"
        ),
        SearchParamDefinition(
          "reason-reference",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.reasonReference"
        ),
        SearchParamDefinition(
          "service-provider",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.serviceProvider"
        ),
        SearchParamDefinition(
          "special-arrangement",
          Enumerations.SearchParamType.TOKEN,
          "Encounter.hospitalization.specialArrangement"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Encounter.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Encounter.subject"
        ),
      )
    "Substance" ->
      listOf(
        SearchParamDefinition("category", Enumerations.SearchParamType.TOKEN, "Substance.category"),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "Substance.code | (Substance.ingredient.substance as CodeableConcept)"
        ),
        SearchParamDefinition(
          "container-identifier",
          Enumerations.SearchParamType.TOKEN,
          "Substance.instance.identifier"
        ),
        SearchParamDefinition(
          "expiry",
          Enumerations.SearchParamType.DATE,
          "Substance.instance.expiry"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Substance.identifier"
        ),
        SearchParamDefinition(
          "quantity",
          Enumerations.SearchParamType.QUANTITY,
          "Substance.instance.quantity"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Substance.status"),
        SearchParamDefinition(
          "substance-reference",
          Enumerations.SearchParamType.REFERENCE,
          "(Substance.ingredient.substance as Reference)"
        ),
      )
    "SubstanceSpecification" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "SubstanceSpecification.code.code"
        ),
      )
    "SearchParameter" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(SearchParameter.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "SearchParameter.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "SearchParameter.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "SearchParameter.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "SearchParameter.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "SearchParameter.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "SearchParameter.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "SearchParameter.status"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "SearchParameter.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "SearchParameter.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "SearchParameter.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "SearchParameter.useContext"
        ),
        SearchParamDefinition("base", Enumerations.SearchParamType.TOKEN, "SearchParameter.base"),
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "SearchParameter.code"),
        SearchParamDefinition(
          "component",
          Enumerations.SearchParamType.REFERENCE,
          "SearchParameter.component.definition"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "SearchParameter.derivedFrom"
        ),
        SearchParamDefinition(
          "target",
          Enumerations.SearchParamType.TOKEN,
          "SearchParameter.target"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "SearchParameter.type"),
      )
    "ActivityDefinition" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "ActivityDefinition.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ActivityDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ActivityDefinition.useContext.value as Quantity) | (ActivityDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ActivityDefinition.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ActivityDefinition.date"),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "ActivityDefinition.relatedArtifact.where(type='depends-on').resource | ActivityDefinition.library"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "ActivityDefinition.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "ActivityDefinition.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "ActivityDefinition.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ActivityDefinition.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ActivityDefinition.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "ActivityDefinition.name"
        ),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "ActivityDefinition.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ActivityDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ActivityDefinition.status"
        ),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "ActivityDefinition.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "ActivityDefinition.title"
        ),
        SearchParamDefinition(
          "topic",
          Enumerations.SearchParamType.TOKEN,
          "ActivityDefinition.topic"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "ActivityDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "ActivityDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ActivityDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ActivityDefinition.useContext"
        ),
      )
    "Communication" ->
      listOf(
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.basedOn"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "Communication.category"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.encounter"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Communication.identifier"
        ),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "Communication.instantiatesUri"
        ),
        SearchParamDefinition("medium", Enumerations.SearchParamType.TOKEN, "Communication.medium"),
        SearchParamDefinition(
          "part-of",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.partOf"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "received",
          Enumerations.SearchParamType.DATE,
          "Communication.received"
        ),
        SearchParamDefinition(
          "recipient",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.recipient"
        ),
        SearchParamDefinition(
          "sender",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.sender"
        ),
        SearchParamDefinition("sent", Enumerations.SearchParamType.DATE, "Communication.sent"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Communication.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Communication.subject"
        ),
      )
    "InsurancePlan" ->
      listOf(
        SearchParamDefinition(
          "address",
          Enumerations.SearchParamType.STRING,
          "InsurancePlan.contact.address"
        ),
        SearchParamDefinition(
          "address-city",
          Enumerations.SearchParamType.STRING,
          "InsurancePlan.contact.address.city"
        ),
        SearchParamDefinition(
          "address-country",
          Enumerations.SearchParamType.STRING,
          "InsurancePlan.contact.address.country"
        ),
        SearchParamDefinition(
          "address-postalcode",
          Enumerations.SearchParamType.STRING,
          "InsurancePlan.contact.address.postalCode"
        ),
        SearchParamDefinition(
          "address-state",
          Enumerations.SearchParamType.STRING,
          "InsurancePlan.contact.address.state"
        ),
        SearchParamDefinition(
          "address-use",
          Enumerations.SearchParamType.TOKEN,
          "InsurancePlan.contact.address.use"
        ),
        SearchParamDefinition(
          "administered-by",
          Enumerations.SearchParamType.REFERENCE,
          "InsurancePlan.administeredBy"
        ),
        SearchParamDefinition(
          "endpoint",
          Enumerations.SearchParamType.REFERENCE,
          "InsurancePlan.endpoint"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "InsurancePlan.identifier"
        ),
        SearchParamDefinition(
          "owned-by",
          Enumerations.SearchParamType.REFERENCE,
          "InsurancePlan.ownedBy"
        ),
        SearchParamDefinition(
          "phonetic",
          Enumerations.SearchParamType.STRING,
          "InsurancePlan.name"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "InsurancePlan.status"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "InsurancePlan.type"),
      )
    "Linkage" ->
      listOf(
        SearchParamDefinition("author", Enumerations.SearchParamType.REFERENCE, "Linkage.author"),
        SearchParamDefinition(
          "item",
          Enumerations.SearchParamType.REFERENCE,
          "Linkage.item.resource"
        ),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.REFERENCE,
          "Linkage.item.resource"
        ),
      )
    "ImmunizationEvaluation" ->
      listOf(
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "ImmunizationEvaluation.date"
        ),
        SearchParamDefinition(
          "dose-status",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationEvaluation.doseStatus"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationEvaluation.identifier"
        ),
        SearchParamDefinition(
          "immunization-event",
          Enumerations.SearchParamType.REFERENCE,
          "ImmunizationEvaluation.immunizationEvent"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ImmunizationEvaluation.patient"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationEvaluation.status"
        ),
        SearchParamDefinition(
          "target-disease",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationEvaluation.targetDisease"
        ),
      )
    "DeviceUseStatement" ->
      listOf(
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceUseStatement.subject"
        ),
        SearchParamDefinition(
          "device",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceUseStatement.device"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DeviceUseStatement.identifier"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceUseStatement.subject"
        ),
      )
    "RequestGroup" ->
      listOf(
        SearchParamDefinition(
          "author",
          Enumerations.SearchParamType.REFERENCE,
          "RequestGroup.author"
        ),
        SearchParamDefinition(
          "authored",
          Enumerations.SearchParamType.DATE,
          "RequestGroup.authoredOn"
        ),
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "RequestGroup.code"),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "RequestGroup.encounter"
        ),
        SearchParamDefinition(
          "group-identifier",
          Enumerations.SearchParamType.TOKEN,
          "RequestGroup.groupIdentifier"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "RequestGroup.identifier"
        ),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "RequestGroup.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "RequestGroup.instantiatesUri"
        ),
        SearchParamDefinition("intent", Enumerations.SearchParamType.TOKEN, "RequestGroup.intent"),
        SearchParamDefinition(
          "participant",
          Enumerations.SearchParamType.REFERENCE,
          "RequestGroup.action.participant"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "RequestGroup.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "priority",
          Enumerations.SearchParamType.TOKEN,
          "RequestGroup.priority"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "RequestGroup.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "RequestGroup.subject"
        ),
      )
    "DeviceRequest" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "(DeviceRequest.code as CodeableConcept)"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DeviceRequest.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.encounter"
        ),
        SearchParamDefinition(
          "authored-on",
          Enumerations.SearchParamType.DATE,
          "DeviceRequest.authoredOn"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.basedOn"
        ),
        SearchParamDefinition(
          "device",
          Enumerations.SearchParamType.REFERENCE,
          "(DeviceRequest.code as Reference)"
        ),
        SearchParamDefinition(
          "event-date",
          Enumerations.SearchParamType.DATE,
          "(DeviceRequest.occurrence as dateTime) | (DeviceRequest.occurrence as Period)"
        ),
        SearchParamDefinition(
          "group-identifier",
          Enumerations.SearchParamType.TOKEN,
          "DeviceRequest.groupIdentifier"
        ),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "DeviceRequest.instantiatesUri"
        ),
        SearchParamDefinition(
          "insurance",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.insurance"
        ),
        SearchParamDefinition("intent", Enumerations.SearchParamType.TOKEN, "DeviceRequest.intent"),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.performer"
        ),
        SearchParamDefinition(
          "prior-request",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.priorRequest"
        ),
        SearchParamDefinition(
          "requester",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.requester"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "DeviceRequest.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceRequest.subject"
        ),
      )
    "MessageHeader" ->
      listOf(
        SearchParamDefinition(
          "author",
          Enumerations.SearchParamType.REFERENCE,
          "MessageHeader.author"
        ),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "MessageHeader.response.code"
        ),
        SearchParamDefinition(
          "destination",
          Enumerations.SearchParamType.STRING,
          "MessageHeader.destination.name"
        ),
        SearchParamDefinition(
          "destination-uri",
          Enumerations.SearchParamType.URI,
          "MessageHeader.destination.endpoint"
        ),
        SearchParamDefinition(
          "enterer",
          Enumerations.SearchParamType.REFERENCE,
          "MessageHeader.enterer"
        ),
        SearchParamDefinition("event", Enumerations.SearchParamType.TOKEN, "MessageHeader.event"),
        SearchParamDefinition(
          "focus",
          Enumerations.SearchParamType.REFERENCE,
          "MessageHeader.focus"
        ),
        SearchParamDefinition(
          "receiver",
          Enumerations.SearchParamType.REFERENCE,
          "MessageHeader.destination.receiver"
        ),
        SearchParamDefinition(
          "response-id",
          Enumerations.SearchParamType.TOKEN,
          "MessageHeader.response.identifier"
        ),
        SearchParamDefinition(
          "responsible",
          Enumerations.SearchParamType.REFERENCE,
          "MessageHeader.responsible"
        ),
        SearchParamDefinition(
          "sender",
          Enumerations.SearchParamType.REFERENCE,
          "MessageHeader.sender"
        ),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.STRING,
          "MessageHeader.source.name"
        ),
        SearchParamDefinition(
          "source-uri",
          Enumerations.SearchParamType.URI,
          "MessageHeader.source.endpoint"
        ),
        SearchParamDefinition(
          "target",
          Enumerations.SearchParamType.REFERENCE,
          "MessageHeader.destination.target"
        ),
      )
    "ImmunizationRecommendation" ->
      listOf(
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "ImmunizationRecommendation.date"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationRecommendation.identifier"
        ),
        SearchParamDefinition(
          "information",
          Enumerations.SearchParamType.REFERENCE,
          "ImmunizationRecommendation.recommendation.supportingPatientInformation"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ImmunizationRecommendation.patient"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationRecommendation.recommendation.forecastStatus"
        ),
        SearchParamDefinition(
          "support",
          Enumerations.SearchParamType.REFERENCE,
          "ImmunizationRecommendation.recommendation.supportingImmunization"
        ),
        SearchParamDefinition(
          "target-disease",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationRecommendation.recommendation.targetDisease"
        ),
        SearchParamDefinition(
          "vaccine-type",
          Enumerations.SearchParamType.TOKEN,
          "ImmunizationRecommendation.recommendation.vaccineCode"
        ),
      )
    "Provenance" ->
      listOf(
        SearchParamDefinition(
          "agent",
          Enumerations.SearchParamType.REFERENCE,
          "Provenance.agent.who"
        ),
        SearchParamDefinition(
          "agent-role",
          Enumerations.SearchParamType.TOKEN,
          "Provenance.agent.role"
        ),
        SearchParamDefinition(
          "agent-type",
          Enumerations.SearchParamType.TOKEN,
          "Provenance.agent.type"
        ),
        SearchParamDefinition(
          "entity",
          Enumerations.SearchParamType.REFERENCE,
          "Provenance.entity.what"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "Provenance.location"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Provenance.target.where(resolve() is Patient)"
        ),
        SearchParamDefinition("recorded", Enumerations.SearchParamType.DATE, "Provenance.recorded"),
        SearchParamDefinition(
          "signature-type",
          Enumerations.SearchParamType.TOKEN,
          "Provenance.signature.type"
        ),
        SearchParamDefinition(
          "target",
          Enumerations.SearchParamType.REFERENCE,
          "Provenance.target"
        ),
        SearchParamDefinition(
          "when",
          Enumerations.SearchParamType.DATE,
          "(Provenance.occurred as dateTime)"
        ),
      )
    "Task" ->
      listOf(
        SearchParamDefinition("authored-on", Enumerations.SearchParamType.DATE, "Task.authoredOn"),
        SearchParamDefinition("based-on", Enumerations.SearchParamType.REFERENCE, "Task.basedOn"),
        SearchParamDefinition(
          "business-status",
          Enumerations.SearchParamType.TOKEN,
          "Task.businessStatus"
        ),
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "Task.code"),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Task.encounter"
        ),
        SearchParamDefinition("focus", Enumerations.SearchParamType.REFERENCE, "Task.focus"),
        SearchParamDefinition(
          "group-identifier",
          Enumerations.SearchParamType.TOKEN,
          "Task.groupIdentifier"
        ),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Task.identifier"),
        SearchParamDefinition("intent", Enumerations.SearchParamType.TOKEN, "Task.intent"),
        SearchParamDefinition("modified", Enumerations.SearchParamType.DATE, "Task.lastModified"),
        SearchParamDefinition("owner", Enumerations.SearchParamType.REFERENCE, "Task.owner"),
        SearchParamDefinition("part-of", Enumerations.SearchParamType.REFERENCE, "Task.partOf"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Task.for.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.TOKEN,
          "Task.performerType"
        ),
        SearchParamDefinition("period", Enumerations.SearchParamType.DATE, "Task.executionPeriod"),
        SearchParamDefinition("priority", Enumerations.SearchParamType.TOKEN, "Task.priority"),
        SearchParamDefinition(
          "requester",
          Enumerations.SearchParamType.REFERENCE,
          "Task.requester"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Task.status"),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "Task.for"),
      )
    "Questionnaire" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "Questionnaire.item.code"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(Questionnaire.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(Questionnaire.useContext.value as Quantity) | (Questionnaire.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "Questionnaire.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Questionnaire.date"),
        SearchParamDefinition(
          "definition",
          Enumerations.SearchParamType.URI,
          "Questionnaire.item.definition"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "Questionnaire.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "Questionnaire.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Questionnaire.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "Questionnaire.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Questionnaire.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "Questionnaire.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Questionnaire.status"),
        SearchParamDefinition(
          "subject-type",
          Enumerations.SearchParamType.TOKEN,
          "Questionnaire.subjectType"
        ),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "Questionnaire.title"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "Questionnaire.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "Questionnaire.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "Questionnaire.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "Questionnaire.useContext"
        ),
      )
    "ExplanationOfBenefit" ->
      listOf(
        SearchParamDefinition(
          "care-team",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.careTeam.provider"
        ),
        SearchParamDefinition(
          "claim",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.claim"
        ),
        SearchParamDefinition(
          "coverage",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.insurance.coverage"
        ),
        SearchParamDefinition(
          "created",
          Enumerations.SearchParamType.DATE,
          "ExplanationOfBenefit.created"
        ),
        SearchParamDefinition(
          "detail-udi",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.item.detail.udi"
        ),
        SearchParamDefinition(
          "disposition",
          Enumerations.SearchParamType.STRING,
          "ExplanationOfBenefit.disposition"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.item.encounter"
        ),
        SearchParamDefinition(
          "enterer",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.enterer"
        ),
        SearchParamDefinition(
          "facility",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.facility"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ExplanationOfBenefit.identifier"
        ),
        SearchParamDefinition(
          "item-udi",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.item.udi"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.patient"
        ),
        SearchParamDefinition(
          "payee",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.payee.party"
        ),
        SearchParamDefinition(
          "procedure-udi",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.procedure.udi"
        ),
        SearchParamDefinition(
          "provider",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.provider"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ExplanationOfBenefit.status"
        ),
        SearchParamDefinition(
          "subdetail-udi",
          Enumerations.SearchParamType.REFERENCE,
          "ExplanationOfBenefit.item.detail.subDetail.udi"
        ),
      )
    "MedicinalProductPharmaceutical" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProductPharmaceutical.identifier"
        ),
        SearchParamDefinition(
          "route",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProductPharmaceutical.routeOfAdministration.code"
        ),
        SearchParamDefinition(
          "target-species",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.code"
        ),
      )
    "ResearchStudy" ->
      listOf(
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "ResearchStudy.category"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ResearchStudy.period"),
        SearchParamDefinition("focus", Enumerations.SearchParamType.TOKEN, "ResearchStudy.focus"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ResearchStudy.identifier"
        ),
        SearchParamDefinition(
          "keyword",
          Enumerations.SearchParamType.TOKEN,
          "ResearchStudy.keyword"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.TOKEN,
          "ResearchStudy.location"
        ),
        SearchParamDefinition(
          "partof",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchStudy.partOf"
        ),
        SearchParamDefinition(
          "principalinvestigator",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchStudy.principalInvestigator"
        ),
        SearchParamDefinition(
          "protocol",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchStudy.protocol"
        ),
        SearchParamDefinition("site", Enumerations.SearchParamType.REFERENCE, "ResearchStudy.site"),
        SearchParamDefinition(
          "sponsor",
          Enumerations.SearchParamType.REFERENCE,
          "ResearchStudy.sponsor"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "ResearchStudy.status"),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "ResearchStudy.title"),
      )
    "Specimen" ->
      listOf(
        SearchParamDefinition(
          "accession",
          Enumerations.SearchParamType.TOKEN,
          "Specimen.accessionIdentifier"
        ),
        SearchParamDefinition(
          "bodysite",
          Enumerations.SearchParamType.TOKEN,
          "Specimen.collection.bodySite"
        ),
        SearchParamDefinition(
          "collected",
          Enumerations.SearchParamType.DATE,
          "Specimen.collection.collected"
        ),
        SearchParamDefinition(
          "collector",
          Enumerations.SearchParamType.REFERENCE,
          "Specimen.collection.collector"
        ),
        SearchParamDefinition(
          "container",
          Enumerations.SearchParamType.TOKEN,
          "Specimen.container.type"
        ),
        SearchParamDefinition(
          "container-id",
          Enumerations.SearchParamType.TOKEN,
          "Specimen.container.identifier"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Specimen.identifier"
        ),
        SearchParamDefinition("parent", Enumerations.SearchParamType.REFERENCE, "Specimen.parent"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Specimen.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Specimen.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Specimen.subject"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Specimen.type"),
      )
    "AllergyIntolerance" ->
      listOf(
        SearchParamDefinition(
          "asserter",
          Enumerations.SearchParamType.REFERENCE,
          "AllergyIntolerance.asserter"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.category"
        ),
        SearchParamDefinition(
          "clinical-status",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.clinicalStatus"
        ),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.code | AllergyIntolerance.reaction.substance"
        ),
        SearchParamDefinition(
          "criticality",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.criticality"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "AllergyIntolerance.recordedDate"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.identifier"
        ),
        SearchParamDefinition(
          "last-date",
          Enumerations.SearchParamType.DATE,
          "AllergyIntolerance.lastOccurrence"
        ),
        SearchParamDefinition(
          "manifestation",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.reaction.manifestation"
        ),
        SearchParamDefinition(
          "onset",
          Enumerations.SearchParamType.DATE,
          "AllergyIntolerance.reaction.onset"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "AllergyIntolerance.patient"
        ),
        SearchParamDefinition(
          "recorder",
          Enumerations.SearchParamType.REFERENCE,
          "AllergyIntolerance.recorder"
        ),
        SearchParamDefinition(
          "route",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.reaction.exposureRoute"
        ),
        SearchParamDefinition(
          "severity",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.reaction.severity"
        ),
        SearchParamDefinition(
          "type",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.type"
        ),
        SearchParamDefinition(
          "verification-status",
          Enumerations.SearchParamType.TOKEN,
          "AllergyIntolerance.verificationStatus"
        ),
      )
    "CarePlan" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "CarePlan.period"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "CarePlan.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "activity-code",
          Enumerations.SearchParamType.TOKEN,
          "CarePlan.activity.detail.code"
        ),
        SearchParamDefinition(
          "activity-date",
          Enumerations.SearchParamType.DATE,
          "CarePlan.activity.detail.scheduled"
        ),
        SearchParamDefinition(
          "activity-reference",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.activity.reference"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.basedOn"
        ),
        SearchParamDefinition(
          "care-team",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.careTeam"
        ),
        SearchParamDefinition("category", Enumerations.SearchParamType.TOKEN, "CarePlan.category"),
        SearchParamDefinition(
          "condition",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.addresses"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.encounter"
        ),
        SearchParamDefinition("goal", Enumerations.SearchParamType.REFERENCE, "CarePlan.goal"),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "CarePlan.instantiatesUri"
        ),
        SearchParamDefinition("intent", Enumerations.SearchParamType.TOKEN, "CarePlan.intent"),
        SearchParamDefinition("part-of", Enumerations.SearchParamType.REFERENCE, "CarePlan.partOf"),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.activity.detail.performer"
        ),
        SearchParamDefinition(
          "replaces",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.replaces"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "CarePlan.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "CarePlan.subject"
        ),
      )
    "StructureDefinition" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(StructureDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "StructureDefinition.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "StructureDefinition.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "StructureDefinition.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "StructureDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "StructureDefinition.title"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "StructureDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "StructureDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "StructureDefinition.useContext"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.identifier"
        ),
        SearchParamDefinition(
          "abstract",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.abstract"
        ),
        SearchParamDefinition(
          "base",
          Enumerations.SearchParamType.REFERENCE,
          "StructureDefinition.baseDefinition"
        ),
        SearchParamDefinition(
          "base-path",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.snapshot.element.base.path | StructureDefinition.differential.element.base.path"
        ),
        SearchParamDefinition(
          "derivation",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.derivation"
        ),
        SearchParamDefinition(
          "experimental",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.experimental"
        ),
        SearchParamDefinition(
          "ext-context",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.context.type"
        ),
        SearchParamDefinition(
          "keyword",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.keyword"
        ),
        SearchParamDefinition(
          "kind",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.kind"
        ),
        SearchParamDefinition(
          "path",
          Enumerations.SearchParamType.TOKEN,
          "StructureDefinition.snapshot.element.path | StructureDefinition.differential.element.path"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.URI, "StructureDefinition.type"),
        SearchParamDefinition(
          "valueset",
          Enumerations.SearchParamType.REFERENCE,
          "StructureDefinition.snapshot.element.binding.valueSet"
        ),
      )
    "EpisodeOfCare" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "EpisodeOfCare.period"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "EpisodeOfCare.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "EpisodeOfCare.patient"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "EpisodeOfCare.type"),
        SearchParamDefinition(
          "care-manager",
          Enumerations.SearchParamType.REFERENCE,
          "EpisodeOfCare.careManager.where(resolve() is Practitioner)"
        ),
        SearchParamDefinition(
          "condition",
          Enumerations.SearchParamType.REFERENCE,
          "EpisodeOfCare.diagnosis.condition"
        ),
        SearchParamDefinition(
          "incoming-referral",
          Enumerations.SearchParamType.REFERENCE,
          "EpisodeOfCare.referralRequest"
        ),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "EpisodeOfCare.managingOrganization"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "EpisodeOfCare.status"),
      )
    "ChargeItemDefinition" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ChargeItemDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ChargeItemDefinition.useContext.value as Quantity) | (ChargeItemDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ChargeItemDefinition.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "ChargeItemDefinition.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "ChargeItemDefinition.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "ChargeItemDefinition.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ChargeItemDefinition.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ChargeItemDefinition.jurisdiction"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ChargeItemDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ChargeItemDefinition.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "ChargeItemDefinition.title"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "ChargeItemDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "ChargeItemDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ChargeItemDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ChargeItemDefinition.useContext"
        ),
      )
    "Procedure" ->
      listOf(
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "Procedure.code"),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Procedure.performed"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Procedure.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.encounter"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.basedOn"
        ),
        SearchParamDefinition("category", Enumerations.SearchParamType.TOKEN, "Procedure.category"),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "Procedure.instantiatesUri"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.location"
        ),
        SearchParamDefinition(
          "part-of",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.partOf"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.performer.actor"
        ),
        SearchParamDefinition(
          "reason-code",
          Enumerations.SearchParamType.TOKEN,
          "Procedure.reasonCode"
        ),
        SearchParamDefinition(
          "reason-reference",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.reasonReference"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Procedure.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Procedure.subject"
        ),
      )
    "List" ->
      listOf(
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "List.code"),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "List.date"),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "List.identifier"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "List.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "List.encounter"
        ),
        SearchParamDefinition(
          "empty-reason",
          Enumerations.SearchParamType.TOKEN,
          "List.emptyReason"
        ),
        SearchParamDefinition("item", Enumerations.SearchParamType.REFERENCE, "List.entry.item"),
        SearchParamDefinition("notes", Enumerations.SearchParamType.STRING, "List.note.text"),
        SearchParamDefinition("source", Enumerations.SearchParamType.REFERENCE, "List.source"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "List.status"),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "List.subject"),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "List.title"),
      )
    "ConceptMap" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ConceptMap.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ConceptMap.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ConceptMap.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "ConceptMap.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ConceptMap.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "ConceptMap.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ConceptMap.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "ConceptMap.status"),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "ConceptMap.title"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "ConceptMap.url"),
        SearchParamDefinition("version", Enumerations.SearchParamType.TOKEN, "ConceptMap.version"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ConceptMap.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ConceptMap.useContext"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ConceptMap.identifier"
        ),
        SearchParamDefinition(
          "dependson",
          Enumerations.SearchParamType.URI,
          "ConceptMap.group.element.target.dependsOn.property"
        ),
        SearchParamDefinition(
          "other",
          Enumerations.SearchParamType.REFERENCE,
          "ConceptMap.group.unmapped.url"
        ),
        SearchParamDefinition(
          "product",
          Enumerations.SearchParamType.URI,
          "ConceptMap.group.element.target.product.property"
        ),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.REFERENCE,
          "(ConceptMap.source as canonical)"
        ),
        SearchParamDefinition(
          "source-code",
          Enumerations.SearchParamType.TOKEN,
          "ConceptMap.group.element.code"
        ),
        SearchParamDefinition(
          "source-system",
          Enumerations.SearchParamType.URI,
          "ConceptMap.group.source"
        ),
        SearchParamDefinition(
          "source-uri",
          Enumerations.SearchParamType.REFERENCE,
          "(ConceptMap.source as uri)"
        ),
        SearchParamDefinition(
          "target",
          Enumerations.SearchParamType.REFERENCE,
          "(ConceptMap.target as canonical)"
        ),
        SearchParamDefinition(
          "target-code",
          Enumerations.SearchParamType.TOKEN,
          "ConceptMap.group.element.target.code"
        ),
        SearchParamDefinition(
          "target-system",
          Enumerations.SearchParamType.URI,
          "ConceptMap.group.target"
        ),
        SearchParamDefinition(
          "target-uri",
          Enumerations.SearchParamType.REFERENCE,
          "(ConceptMap.target as uri)"
        ),
      )
    "OperationDefinition" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(OperationDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "OperationDefinition.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "OperationDefinition.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "OperationDefinition.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "OperationDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "OperationDefinition.title"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "OperationDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "OperationDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "OperationDefinition.useContext"
        ),
        SearchParamDefinition(
          "base",
          Enumerations.SearchParamType.REFERENCE,
          "OperationDefinition.base"
        ),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.code"
        ),
        SearchParamDefinition(
          "input-profile",
          Enumerations.SearchParamType.REFERENCE,
          "OperationDefinition.inputProfile"
        ),
        SearchParamDefinition(
          "instance",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.instance"
        ),
        SearchParamDefinition(
          "kind",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.kind"
        ),
        SearchParamDefinition(
          "output-profile",
          Enumerations.SearchParamType.REFERENCE,
          "OperationDefinition.outputProfile"
        ),
        SearchParamDefinition(
          "system",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.system"
        ),
        SearchParamDefinition(
          "type",
          Enumerations.SearchParamType.TOKEN,
          "OperationDefinition.type"
        ),
      )
    "ValueSet" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ValueSet.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ValueSet.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ValueSet.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "ValueSet.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ValueSet.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "ValueSet.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ValueSet.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "ValueSet.status"),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "ValueSet.title"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "ValueSet.url"),
        SearchParamDefinition("version", Enumerations.SearchParamType.TOKEN, "ValueSet.version"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ValueSet.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ValueSet.useContext"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ValueSet.identifier"
        ),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "ValueSet.expansion.contains.code | ValueSet.compose.include.concept.code"
        ),
        SearchParamDefinition(
          "expansion",
          Enumerations.SearchParamType.URI,
          "ValueSet.expansion.identifier"
        ),
        SearchParamDefinition(
          "reference",
          Enumerations.SearchParamType.URI,
          "ValueSet.compose.include.system"
        ),
      )
    "MedicationRequest" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "(MedicationRequest.medication as CodeableConcept)"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicationRequest.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationRequest.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "medication",
          Enumerations.SearchParamType.REFERENCE,
          "(MedicationRequest.medication as Reference)"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "MedicationRequest.status"
        ),
        SearchParamDefinition(
          "authoredon",
          Enumerations.SearchParamType.DATE,
          "MedicationRequest.authoredOn"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "MedicationRequest.category"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "MedicationRequest.dosageInstruction.timing.event"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationRequest.encounter"
        ),
        SearchParamDefinition(
          "intended-dispenser",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationRequest.dispenseRequest.performer"
        ),
        SearchParamDefinition(
          "intended-performer",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationRequest.performer"
        ),
        SearchParamDefinition(
          "intended-performertype",
          Enumerations.SearchParamType.TOKEN,
          "MedicationRequest.performerType"
        ),
        SearchParamDefinition(
          "intent",
          Enumerations.SearchParamType.TOKEN,
          "MedicationRequest.intent"
        ),
        SearchParamDefinition(
          "priority",
          Enumerations.SearchParamType.TOKEN,
          "MedicationRequest.priority"
        ),
        SearchParamDefinition(
          "requester",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationRequest.requester"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationRequest.subject"
        ),
      )
    "Immunization" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Immunization.occurrence"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Immunization.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Immunization.patient"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "Immunization.location"
        ),
        SearchParamDefinition(
          "lot-number",
          Enumerations.SearchParamType.STRING,
          "Immunization.lotNumber"
        ),
        SearchParamDefinition(
          "manufacturer",
          Enumerations.SearchParamType.REFERENCE,
          "Immunization.manufacturer"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "Immunization.performer.actor"
        ),
        SearchParamDefinition(
          "reaction",
          Enumerations.SearchParamType.REFERENCE,
          "Immunization.reaction.detail"
        ),
        SearchParamDefinition(
          "reaction-date",
          Enumerations.SearchParamType.DATE,
          "Immunization.reaction.date"
        ),
        SearchParamDefinition(
          "reason-code",
          Enumerations.SearchParamType.TOKEN,
          "Immunization.reasonCode"
        ),
        SearchParamDefinition(
          "reason-reference",
          Enumerations.SearchParamType.REFERENCE,
          "Immunization.reasonReference"
        ),
        SearchParamDefinition(
          "series",
          Enumerations.SearchParamType.STRING,
          "Immunization.protocolApplied.series"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Immunization.status"),
        SearchParamDefinition(
          "status-reason",
          Enumerations.SearchParamType.TOKEN,
          "Immunization.statusReason"
        ),
        SearchParamDefinition(
          "target-disease",
          Enumerations.SearchParamType.TOKEN,
          "Immunization.protocolApplied.targetDisease"
        ),
        SearchParamDefinition(
          "vaccine-code",
          Enumerations.SearchParamType.TOKEN,
          "Immunization.vaccineCode"
        ),
      )
    "EffectEvidenceSynthesis" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(EffectEvidenceSynthesis.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(EffectEvidenceSynthesis.useContext.value as Quantity) | (EffectEvidenceSynthesis.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "EffectEvidenceSynthesis.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "EffectEvidenceSynthesis.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "EffectEvidenceSynthesis.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "EffectEvidenceSynthesis.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "EffectEvidenceSynthesis.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "EffectEvidenceSynthesis.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "EffectEvidenceSynthesis.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "EffectEvidenceSynthesis.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "EffectEvidenceSynthesis.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "EffectEvidenceSynthesis.title"
        ),
        SearchParamDefinition(
          "url",
          Enumerations.SearchParamType.URI,
          "EffectEvidenceSynthesis.url"
        ),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "EffectEvidenceSynthesis.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "EffectEvidenceSynthesis.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "EffectEvidenceSynthesis.useContext"
        ),
      )
    "Device" ->
      listOf(
        SearchParamDefinition(
          "device-name",
          Enumerations.SearchParamType.STRING,
          "Device.deviceName.name | Device.type.coding.display | Device.type.text"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Device.identifier"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "Device.location"
        ),
        SearchParamDefinition(
          "manufacturer",
          Enumerations.SearchParamType.STRING,
          "Device.manufacturer"
        ),
        SearchParamDefinition("model", Enumerations.SearchParamType.STRING, "Device.modelNumber"),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "Device.owner"
        ),
        SearchParamDefinition("patient", Enumerations.SearchParamType.REFERENCE, "Device.patient"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Device.status"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Device.type"),
        SearchParamDefinition(
          "udi-carrier",
          Enumerations.SearchParamType.STRING,
          "Device.udiCarrier.carrierHRF"
        ),
        SearchParamDefinition(
          "udi-di",
          Enumerations.SearchParamType.STRING,
          "Device.udiCarrier.deviceIdentifier"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "Device.url"),
      )
    "VisionPrescription" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "VisionPrescription.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "VisionPrescription.patient"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "VisionPrescription.encounter"
        ),
        SearchParamDefinition(
          "datewritten",
          Enumerations.SearchParamType.DATE,
          "VisionPrescription.dateWritten"
        ),
        SearchParamDefinition(
          "prescriber",
          Enumerations.SearchParamType.REFERENCE,
          "VisionPrescription.prescriber"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "VisionPrescription.status"
        ),
      )
    "Resource" ->
      listOf(
        SearchParamDefinition("_id", Enumerations.SearchParamType.TOKEN, "Resource.id"),
        SearchParamDefinition(
          "_lastUpdated",
          Enumerations.SearchParamType.DATE,
          "Resource.meta.lastUpdated"
        ),
        SearchParamDefinition(
          "_profile",
          Enumerations.SearchParamType.URI,
          "Resource.meta.profile"
        ),
        SearchParamDefinition(
          "_security",
          Enumerations.SearchParamType.TOKEN,
          "Resource.meta.security"
        ),
        SearchParamDefinition("_source", Enumerations.SearchParamType.URI, "Resource.meta.source"),
        SearchParamDefinition("_tag", Enumerations.SearchParamType.TOKEN, "Resource.meta.tag"),
      )
    "Media" ->
      listOf(
        SearchParamDefinition("based-on", Enumerations.SearchParamType.REFERENCE, "Media.basedOn"),
        SearchParamDefinition("created", Enumerations.SearchParamType.DATE, "Media.created"),
        SearchParamDefinition("device", Enumerations.SearchParamType.REFERENCE, "Media.device"),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Media.encounter"
        ),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Media.identifier"),
        SearchParamDefinition("modality", Enumerations.SearchParamType.TOKEN, "Media.modality"),
        SearchParamDefinition("operator", Enumerations.SearchParamType.REFERENCE, "Media.operator"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Media.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("site", Enumerations.SearchParamType.TOKEN, "Media.bodySite"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Media.status"),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "Media.subject"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Media.type"),
        SearchParamDefinition("view", Enumerations.SearchParamType.TOKEN, "Media.view"),
      )
    "MedicinalProductContraindication" ->
      listOf(
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicinalProductContraindication.subject"
        ),
      )
    "EvidenceVariable" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "EvidenceVariable.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(EvidenceVariable.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(EvidenceVariable.useContext.value as Quantity) | (EvidenceVariable.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "EvidenceVariable.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "EvidenceVariable.date"),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "EvidenceVariable.relatedArtifact.where(type='depends-on').resource"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "EvidenceVariable.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "EvidenceVariable.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "EvidenceVariable.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "EvidenceVariable.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "EvidenceVariable.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "EvidenceVariable.name"),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "EvidenceVariable.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "EvidenceVariable.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "EvidenceVariable.status"
        ),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "EvidenceVariable.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "EvidenceVariable.title"
        ),
        SearchParamDefinition(
          "topic",
          Enumerations.SearchParamType.TOKEN,
          "EvidenceVariable.topic"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "EvidenceVariable.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "EvidenceVariable.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "EvidenceVariable.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "EvidenceVariable.useContext"
        ),
      )
    "MolecularSequence" ->
      listOf(
        SearchParamDefinition(
          "chromosome",
          Enumerations.SearchParamType.TOKEN,
          "MolecularSequence.referenceSeq.chromosome"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MolecularSequence.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "MolecularSequence.patient"
        ),
        SearchParamDefinition(
          "referenceseqid",
          Enumerations.SearchParamType.TOKEN,
          "MolecularSequence.referenceSeq.referenceSeqId"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "MolecularSequence.type"),
        SearchParamDefinition(
          "variant-end",
          Enumerations.SearchParamType.NUMBER,
          "MolecularSequence.variant.end"
        ),
        SearchParamDefinition(
          "variant-start",
          Enumerations.SearchParamType.NUMBER,
          "MolecularSequence.variant.start"
        ),
        SearchParamDefinition(
          "window-end",
          Enumerations.SearchParamType.NUMBER,
          "MolecularSequence.referenceSeq.windowEnd"
        ),
        SearchParamDefinition(
          "window-start",
          Enumerations.SearchParamType.NUMBER,
          "MolecularSequence.referenceSeq.windowStart"
        ),
        SearchParamDefinition(
          "chromosome-variant-coordinate",
          Enumerations.SearchParamType.COMPOSITE,
          "MolecularSequence.variant"
        ),
        SearchParamDefinition(
          "chromosome-window-coordinate",
          Enumerations.SearchParamType.COMPOSITE,
          "MolecularSequence.referenceSeq"
        ),
        SearchParamDefinition(
          "referenceseqid-variant-coordinate",
          Enumerations.SearchParamType.COMPOSITE,
          "MolecularSequence.variant"
        ),
        SearchParamDefinition(
          "referenceseqid-window-coordinate",
          Enumerations.SearchParamType.COMPOSITE,
          "MolecularSequence.referenceSeq"
        ),
      )
    "MedicinalProduct" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProduct.identifier"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "MedicinalProduct.name.productName"
        ),
        SearchParamDefinition(
          "name-language",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProduct.name.countryLanguage.language"
        ),
      )
    "DeviceMetric" ->
      listOf(
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "DeviceMetric.category"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DeviceMetric.identifier"
        ),
        SearchParamDefinition(
          "parent",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceMetric.parent"
        ),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceMetric.source"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "DeviceMetric.type"),
      )
    "Flag" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Flag.period"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Flag.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Flag.encounter"
        ),
        SearchParamDefinition("author", Enumerations.SearchParamType.REFERENCE, "Flag.author"),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Flag.identifier"),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "Flag.subject"),
      )
    "CodeSystem" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(CodeSystem.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "CodeSystem.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "CodeSystem.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "CodeSystem.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "CodeSystem.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "CodeSystem.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "CodeSystem.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "CodeSystem.status"),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "CodeSystem.title"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "CodeSystem.url"),
        SearchParamDefinition("version", Enumerations.SearchParamType.TOKEN, "CodeSystem.version"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "CodeSystem.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "CodeSystem.useContext"
        ),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "CodeSystem.concept.code"
        ),
        SearchParamDefinition(
          "content-mode",
          Enumerations.SearchParamType.TOKEN,
          "CodeSystem.content"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "CodeSystem.identifier"
        ),
        SearchParamDefinition(
          "language",
          Enumerations.SearchParamType.TOKEN,
          "CodeSystem.concept.designation.language"
        ),
        SearchParamDefinition(
          "supplements",
          Enumerations.SearchParamType.REFERENCE,
          "CodeSystem.supplements"
        ),
        SearchParamDefinition("system", Enumerations.SearchParamType.URI, "CodeSystem.url"),
      )
    "RiskEvidenceSynthesis" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(RiskEvidenceSynthesis.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(RiskEvidenceSynthesis.useContext.value as Quantity) | (RiskEvidenceSynthesis.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "RiskEvidenceSynthesis.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "RiskEvidenceSynthesis.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "RiskEvidenceSynthesis.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "RiskEvidenceSynthesis.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "RiskEvidenceSynthesis.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "RiskEvidenceSynthesis.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "RiskEvidenceSynthesis.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "RiskEvidenceSynthesis.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "RiskEvidenceSynthesis.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "RiskEvidenceSynthesis.title"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "RiskEvidenceSynthesis.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "RiskEvidenceSynthesis.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "RiskEvidenceSynthesis.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "RiskEvidenceSynthesis.useContext"
        ),
      )
    "AppointmentResponse" ->
      listOf(
        SearchParamDefinition(
          "actor",
          Enumerations.SearchParamType.REFERENCE,
          "AppointmentResponse.actor"
        ),
        SearchParamDefinition(
          "appointment",
          Enumerations.SearchParamType.REFERENCE,
          "AppointmentResponse.appointment"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "AppointmentResponse.identifier"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "AppointmentResponse.actor.where(resolve() is Location)"
        ),
        SearchParamDefinition(
          "part-status",
          Enumerations.SearchParamType.TOKEN,
          "AppointmentResponse.participantStatus"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "AppointmentResponse.actor.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "practitioner",
          Enumerations.SearchParamType.REFERENCE,
          "AppointmentResponse.actor.where(resolve() is Practitioner)"
        ),
      )
    "StructureMap" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(StructureMap.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "StructureMap.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "StructureMap.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "StructureMap.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "StructureMap.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "StructureMap.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "StructureMap.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "StructureMap.status"),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "StructureMap.title"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "StructureMap.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "StructureMap.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "StructureMap.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "StructureMap.useContext"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "StructureMap.identifier"
        ),
      )
    "AdverseEvent" ->
      listOf(
        SearchParamDefinition(
          "actuality",
          Enumerations.SearchParamType.TOKEN,
          "AdverseEvent.actuality"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "AdverseEvent.category"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "AdverseEvent.date"),
        SearchParamDefinition("event", Enumerations.SearchParamType.TOKEN, "AdverseEvent.event"),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "AdverseEvent.location"
        ),
        SearchParamDefinition(
          "recorder",
          Enumerations.SearchParamType.REFERENCE,
          "AdverseEvent.recorder"
        ),
        SearchParamDefinition(
          "resultingcondition",
          Enumerations.SearchParamType.REFERENCE,
          "AdverseEvent.resultingCondition"
        ),
        SearchParamDefinition(
          "seriousness",
          Enumerations.SearchParamType.TOKEN,
          "AdverseEvent.seriousness"
        ),
        SearchParamDefinition(
          "severity",
          Enumerations.SearchParamType.TOKEN,
          "AdverseEvent.severity"
        ),
        SearchParamDefinition(
          "study",
          Enumerations.SearchParamType.REFERENCE,
          "AdverseEvent.study"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "AdverseEvent.subject"
        ),
        SearchParamDefinition(
          "substance",
          Enumerations.SearchParamType.REFERENCE,
          "AdverseEvent.suspectEntity.instance"
        ),
      )
    "GuidanceResponse" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "GuidanceResponse.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "GuidanceResponse.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "request",
          Enumerations.SearchParamType.TOKEN,
          "GuidanceResponse.requestIdentifier"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "GuidanceResponse.subject"
        ),
      )
    "Observation" ->
      listOf(
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "Observation.code"),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Observation.effective"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Observation.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.encounter"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.basedOn"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "Observation.category"
        ),
        SearchParamDefinition(
          "combo-code",
          Enumerations.SearchParamType.TOKEN,
          "Observation.code | Observation.component.code"
        ),
        SearchParamDefinition(
          "combo-data-absent-reason",
          Enumerations.SearchParamType.TOKEN,
          "Observation.dataAbsentReason | Observation.component.dataAbsentReason"
        ),
        SearchParamDefinition(
          "combo-value-concept",
          Enumerations.SearchParamType.TOKEN,
          "(Observation.value as CodeableConcept) | (Observation.component.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "combo-value-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(Observation.value as Quantity) | (Observation.value as SampledData) | (Observation.component.value as Quantity) | (Observation.component.value as SampledData)"
        ),
        SearchParamDefinition(
          "component-code",
          Enumerations.SearchParamType.TOKEN,
          "Observation.component.code"
        ),
        SearchParamDefinition(
          "component-data-absent-reason",
          Enumerations.SearchParamType.TOKEN,
          "Observation.component.dataAbsentReason"
        ),
        SearchParamDefinition(
          "component-value-concept",
          Enumerations.SearchParamType.TOKEN,
          "(Observation.component.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "component-value-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(Observation.component.value as Quantity) | (Observation.component.value as SampledData)"
        ),
        SearchParamDefinition(
          "data-absent-reason",
          Enumerations.SearchParamType.TOKEN,
          "Observation.dataAbsentReason"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.derivedFrom"
        ),
        SearchParamDefinition(
          "device",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.device"
        ),
        SearchParamDefinition("focus", Enumerations.SearchParamType.REFERENCE, "Observation.focus"),
        SearchParamDefinition(
          "has-member",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.hasMember"
        ),
        SearchParamDefinition("method", Enumerations.SearchParamType.TOKEN, "Observation.method"),
        SearchParamDefinition(
          "part-of",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.partOf"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.performer"
        ),
        SearchParamDefinition(
          "specimen",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.specimen"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Observation.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Observation.subject"
        ),
        SearchParamDefinition(
          "value-concept",
          Enumerations.SearchParamType.TOKEN,
          "(Observation.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "value-date",
          Enumerations.SearchParamType.DATE,
          "(Observation.value as dateTime) | (Observation.value as Period)"
        ),
        SearchParamDefinition(
          "value-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(Observation.value as Quantity) | (Observation.value as SampledData)"
        ),
        SearchParamDefinition(
          "value-string",
          Enumerations.SearchParamType.STRING,
          "(Observation.value as string) | (Observation.value as CodeableConcept).text"
        ),
        SearchParamDefinition(
          "code-value-concept",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation"
        ),
        SearchParamDefinition(
          "code-value-date",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation"
        ),
        SearchParamDefinition(
          "code-value-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation"
        ),
        SearchParamDefinition(
          "code-value-string",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation"
        ),
        SearchParamDefinition(
          "combo-code-value-concept",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation | Observation.component"
        ),
        SearchParamDefinition(
          "combo-code-value-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation | Observation.component"
        ),
        SearchParamDefinition(
          "component-code-value-concept",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation.component"
        ),
        SearchParamDefinition(
          "component-code-value-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "Observation.component"
        ),
      )
    "MedicationAdministration" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "(MedicationAdministration.medication as CodeableConcept)"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicationAdministration.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationAdministration.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationAdministration.context"
        ),
        SearchParamDefinition(
          "device",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationAdministration.device"
        ),
        SearchParamDefinition(
          "effective-time",
          Enumerations.SearchParamType.DATE,
          "MedicationAdministration.effective"
        ),
        SearchParamDefinition(
          "medication",
          Enumerations.SearchParamType.REFERENCE,
          "(MedicationAdministration.medication as Reference)"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationAdministration.performer.actor"
        ),
        SearchParamDefinition(
          "reason-given",
          Enumerations.SearchParamType.TOKEN,
          "MedicationAdministration.reasonCode"
        ),
        SearchParamDefinition(
          "reason-not-given",
          Enumerations.SearchParamType.TOKEN,
          "MedicationAdministration.statusReason"
        ),
        SearchParamDefinition(
          "request",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationAdministration.request"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "MedicationAdministration.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationAdministration.subject"
        ),
      )
    "EnrollmentResponse" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "EnrollmentResponse.identifier"
        ),
        SearchParamDefinition(
          "request",
          Enumerations.SearchParamType.REFERENCE,
          "EnrollmentResponse.request"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "EnrollmentResponse.status"
        ),
      )
    "Library" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "Library.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "content-type",
          Enumerations.SearchParamType.TOKEN,
          "Library.content.contentType"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(Library.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(Library.useContext.value as Quantity) | (Library.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "Library.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Library.date"),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "Library.relatedArtifact.where(type='depends-on').resource"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "Library.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "Library.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "Library.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Library.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "Library.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Library.name"),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "Library.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "Library.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Library.status"),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "Library.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "Library.title"),
        SearchParamDefinition("topic", Enumerations.SearchParamType.TOKEN, "Library.topic"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Library.type"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "Library.url"),
        SearchParamDefinition("version", Enumerations.SearchParamType.TOKEN, "Library.version"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "Library.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "Library.useContext"
        ),
      )
    "MedicinalProductInteraction" ->
      listOf(
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicinalProductInteraction.subject"
        ),
      )
    "MedicationStatement" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "(MedicationStatement.medication as CodeableConcept)"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicationStatement.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationStatement.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "medication",
          Enumerations.SearchParamType.REFERENCE,
          "(MedicationStatement.medication as Reference)"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "MedicationStatement.status"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "MedicationStatement.category"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationStatement.context"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "MedicationStatement.effective"
        ),
        SearchParamDefinition(
          "part-of",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationStatement.partOf"
        ),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationStatement.informationSource"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationStatement.subject"
        ),
      )
    "CommunicationRequest" ->
      listOf(
        SearchParamDefinition(
          "authored",
          Enumerations.SearchParamType.DATE,
          "CommunicationRequest.authoredOn"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.basedOn"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "CommunicationRequest.category"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.encounter"
        ),
        SearchParamDefinition(
          "group-identifier",
          Enumerations.SearchParamType.TOKEN,
          "CommunicationRequest.groupIdentifier"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "CommunicationRequest.identifier"
        ),
        SearchParamDefinition(
          "medium",
          Enumerations.SearchParamType.TOKEN,
          "CommunicationRequest.medium"
        ),
        SearchParamDefinition(
          "occurrence",
          Enumerations.SearchParamType.DATE,
          "(CommunicationRequest.occurrence as dateTime)"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "priority",
          Enumerations.SearchParamType.TOKEN,
          "CommunicationRequest.priority"
        ),
        SearchParamDefinition(
          "recipient",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.recipient"
        ),
        SearchParamDefinition(
          "replaces",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.replaces"
        ),
        SearchParamDefinition(
          "requester",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.requester"
        ),
        SearchParamDefinition(
          "sender",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.sender"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "CommunicationRequest.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "CommunicationRequest.subject"
        ),
      )
    "TestScript" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(TestScript.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(TestScript.useContext.value as Quantity) | (TestScript.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "TestScript.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "TestScript.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "TestScript.description"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "TestScript.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "TestScript.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "TestScript.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "TestScript.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "TestScript.status"),
        SearchParamDefinition(
          "testscript-capability",
          Enumerations.SearchParamType.STRING,
          "TestScript.metadata.capability.description"
        ),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "TestScript.title"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "TestScript.url"),
        SearchParamDefinition("version", Enumerations.SearchParamType.TOKEN, "TestScript.version"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "TestScript.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "TestScript.useContext"
        ),
      )
    "Basic" ->
      listOf(
        SearchParamDefinition("author", Enumerations.SearchParamType.REFERENCE, "Basic.author"),
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "Basic.code"),
        SearchParamDefinition("created", Enumerations.SearchParamType.DATE, "Basic.created"),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Basic.identifier"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Basic.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("subject", Enumerations.SearchParamType.REFERENCE, "Basic.subject"),
      )
    "TestReport" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "TestReport.identifier"
        ),
        SearchParamDefinition("issued", Enumerations.SearchParamType.DATE, "TestReport.issued"),
        SearchParamDefinition(
          "participant",
          Enumerations.SearchParamType.URI,
          "TestReport.participant.uri"
        ),
        SearchParamDefinition("result", Enumerations.SearchParamType.TOKEN, "TestReport.result"),
        SearchParamDefinition("tester", Enumerations.SearchParamType.STRING, "TestReport.tester"),
        SearchParamDefinition(
          "testscript",
          Enumerations.SearchParamType.REFERENCE,
          "TestReport.testScript"
        ),
      )
    "ClaimResponse" ->
      listOf(
        SearchParamDefinition(
          "created",
          Enumerations.SearchParamType.DATE,
          "ClaimResponse.created"
        ),
        SearchParamDefinition(
          "disposition",
          Enumerations.SearchParamType.STRING,
          "ClaimResponse.disposition"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ClaimResponse.identifier"
        ),
        SearchParamDefinition(
          "insurer",
          Enumerations.SearchParamType.REFERENCE,
          "ClaimResponse.insurer"
        ),
        SearchParamDefinition(
          "outcome",
          Enumerations.SearchParamType.TOKEN,
          "ClaimResponse.outcome"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ClaimResponse.patient"
        ),
        SearchParamDefinition(
          "payment-date",
          Enumerations.SearchParamType.DATE,
          "ClaimResponse.payment.date"
        ),
        SearchParamDefinition(
          "request",
          Enumerations.SearchParamType.REFERENCE,
          "ClaimResponse.request"
        ),
        SearchParamDefinition(
          "requestor",
          Enumerations.SearchParamType.REFERENCE,
          "ClaimResponse.requestor"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "ClaimResponse.status"),
        SearchParamDefinition("use", Enumerations.SearchParamType.TOKEN, "ClaimResponse.use"),
      )
    "MedicationDispense" ->
      listOf(
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "(MedicationDispense.medication as CodeableConcept)"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicationDispense.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "medication",
          Enumerations.SearchParamType.REFERENCE,
          "(MedicationDispense.medication as Reference)"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "MedicationDispense.status"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.context"
        ),
        SearchParamDefinition(
          "destination",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.destination"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.performer.actor"
        ),
        SearchParamDefinition(
          "prescription",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.authorizingPrescription"
        ),
        SearchParamDefinition(
          "receiver",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.receiver"
        ),
        SearchParamDefinition(
          "responsibleparty",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.substitution.responsibleParty"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationDispense.subject"
        ),
        SearchParamDefinition(
          "type",
          Enumerations.SearchParamType.TOKEN,
          "MedicationDispense.type"
        ),
        SearchParamDefinition(
          "whenhandedover",
          Enumerations.SearchParamType.DATE,
          "MedicationDispense.whenHandedOver"
        ),
        SearchParamDefinition(
          "whenprepared",
          Enumerations.SearchParamType.DATE,
          "MedicationDispense.whenPrepared"
        ),
      )
    "DiagnosticReport" ->
      listOf(
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "DiagnosticReport.code"),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "DiagnosticReport.effective"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DiagnosticReport.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.encounter"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.basedOn"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "DiagnosticReport.category"
        ),
        SearchParamDefinition(
          "conclusion",
          Enumerations.SearchParamType.TOKEN,
          "DiagnosticReport.conclusionCode"
        ),
        SearchParamDefinition(
          "issued",
          Enumerations.SearchParamType.DATE,
          "DiagnosticReport.issued"
        ),
        SearchParamDefinition(
          "media",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.media.link"
        ),
        SearchParamDefinition(
          "performer",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.performer"
        ),
        SearchParamDefinition(
          "result",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.result"
        ),
        SearchParamDefinition(
          "results-interpreter",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.resultsInterpreter"
        ),
        SearchParamDefinition(
          "specimen",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.specimen"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "DiagnosticReport.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "DiagnosticReport.subject"
        ),
      )
    "OrganizationAffiliation" ->
      listOf(
        SearchParamDefinition(
          "active",
          Enumerations.SearchParamType.TOKEN,
          "OrganizationAffiliation.active"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "OrganizationAffiliation.period"
        ),
        SearchParamDefinition(
          "email",
          Enumerations.SearchParamType.TOKEN,
          "OrganizationAffiliation.telecom.where(system='email')"
        ),
        SearchParamDefinition(
          "endpoint",
          Enumerations.SearchParamType.REFERENCE,
          "OrganizationAffiliation.endpoint"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "OrganizationAffiliation.identifier"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "OrganizationAffiliation.location"
        ),
        SearchParamDefinition(
          "network",
          Enumerations.SearchParamType.REFERENCE,
          "OrganizationAffiliation.network"
        ),
        SearchParamDefinition(
          "participating-organization",
          Enumerations.SearchParamType.REFERENCE,
          "OrganizationAffiliation.participatingOrganization"
        ),
        SearchParamDefinition(
          "phone",
          Enumerations.SearchParamType.TOKEN,
          "OrganizationAffiliation.telecom.where(system='phone')"
        ),
        SearchParamDefinition(
          "primary-organization",
          Enumerations.SearchParamType.REFERENCE,
          "OrganizationAffiliation.organization"
        ),
        SearchParamDefinition(
          "role",
          Enumerations.SearchParamType.TOKEN,
          "OrganizationAffiliation.code"
        ),
        SearchParamDefinition(
          "service",
          Enumerations.SearchParamType.REFERENCE,
          "OrganizationAffiliation.healthcareService"
        ),
        SearchParamDefinition(
          "specialty",
          Enumerations.SearchParamType.TOKEN,
          "OrganizationAffiliation.specialty"
        ),
        SearchParamDefinition(
          "telecom",
          Enumerations.SearchParamType.TOKEN,
          "OrganizationAffiliation.telecom"
        ),
      )
    "HealthcareService" ->
      listOf(
        SearchParamDefinition(
          "active",
          Enumerations.SearchParamType.TOKEN,
          "HealthcareService.active"
        ),
        SearchParamDefinition(
          "characteristic",
          Enumerations.SearchParamType.TOKEN,
          "HealthcareService.characteristic"
        ),
        SearchParamDefinition(
          "coverage-area",
          Enumerations.SearchParamType.REFERENCE,
          "HealthcareService.coverageArea"
        ),
        SearchParamDefinition(
          "endpoint",
          Enumerations.SearchParamType.REFERENCE,
          "HealthcareService.endpoint"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "HealthcareService.identifier"
        ),
        SearchParamDefinition(
          "location",
          Enumerations.SearchParamType.REFERENCE,
          "HealthcareService.location"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "HealthcareService.name"
        ),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "HealthcareService.providedBy"
        ),
        SearchParamDefinition(
          "program",
          Enumerations.SearchParamType.TOKEN,
          "HealthcareService.program"
        ),
        SearchParamDefinition(
          "service-category",
          Enumerations.SearchParamType.TOKEN,
          "HealthcareService.category"
        ),
        SearchParamDefinition(
          "service-type",
          Enumerations.SearchParamType.TOKEN,
          "HealthcareService.type"
        ),
        SearchParamDefinition(
          "specialty",
          Enumerations.SearchParamType.TOKEN,
          "HealthcareService.specialty"
        ),
      )
    "MedicinalProductIndication" ->
      listOf(
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicinalProductIndication.subject"
        ),
      )
    "NutritionOrder" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "NutritionOrder.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "NutritionOrder.patient"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "NutritionOrder.encounter"
        ),
        SearchParamDefinition(
          "additive",
          Enumerations.SearchParamType.TOKEN,
          "NutritionOrder.enteralFormula.additiveType"
        ),
        SearchParamDefinition(
          "datetime",
          Enumerations.SearchParamType.DATE,
          "NutritionOrder.dateTime"
        ),
        SearchParamDefinition(
          "formula",
          Enumerations.SearchParamType.TOKEN,
          "NutritionOrder.enteralFormula.baseFormulaType"
        ),
        SearchParamDefinition(
          "instantiates-canonical",
          Enumerations.SearchParamType.REFERENCE,
          "NutritionOrder.instantiatesCanonical"
        ),
        SearchParamDefinition(
          "instantiates-uri",
          Enumerations.SearchParamType.URI,
          "NutritionOrder.instantiatesUri"
        ),
        SearchParamDefinition(
          "oraldiet",
          Enumerations.SearchParamType.TOKEN,
          "NutritionOrder.oralDiet.type"
        ),
        SearchParamDefinition(
          "provider",
          Enumerations.SearchParamType.REFERENCE,
          "NutritionOrder.orderer"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "NutritionOrder.status"
        ),
        SearchParamDefinition(
          "supplement",
          Enumerations.SearchParamType.TOKEN,
          "NutritionOrder.supplement.type"
        ),
      )
    "TerminologyCapabilities" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(TerminologyCapabilities.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "TerminologyCapabilities.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "TerminologyCapabilities.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "TerminologyCapabilities.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "TerminologyCapabilities.jurisdiction"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "TerminologyCapabilities.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "TerminologyCapabilities.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "TerminologyCapabilities.status"
        ),
        SearchParamDefinition(
          "title",
          Enumerations.SearchParamType.STRING,
          "TerminologyCapabilities.title"
        ),
        SearchParamDefinition(
          "url",
          Enumerations.SearchParamType.URI,
          "TerminologyCapabilities.url"
        ),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "TerminologyCapabilities.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "TerminologyCapabilities.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "TerminologyCapabilities.useContext"
        ),
      )
    "Evidence" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "Evidence.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(Evidence.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(Evidence.useContext.value as Quantity) | (Evidence.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "Evidence.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Evidence.date"),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "Evidence.relatedArtifact.where(type='depends-on').resource"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "Evidence.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "Evidence.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "Evidence.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Evidence.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "Evidence.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Evidence.name"),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "Evidence.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "Evidence.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Evidence.status"),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "Evidence.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "Evidence.title"),
        SearchParamDefinition("topic", Enumerations.SearchParamType.TOKEN, "Evidence.topic"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "Evidence.url"),
        SearchParamDefinition("version", Enumerations.SearchParamType.TOKEN, "Evidence.version"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "Evidence.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "Evidence.useContext"
        ),
      )
    "AuditEvent" ->
      listOf(
        SearchParamDefinition("action", Enumerations.SearchParamType.TOKEN, "AuditEvent.action"),
        SearchParamDefinition(
          "address",
          Enumerations.SearchParamType.STRING,
          "AuditEvent.agent.network.address"
        ),
        SearchParamDefinition(
          "agent",
          Enumerations.SearchParamType.REFERENCE,
          "AuditEvent.agent.who"
        ),
        SearchParamDefinition(
          "agent-name",
          Enumerations.SearchParamType.STRING,
          "AuditEvent.agent.name"
        ),
        SearchParamDefinition(
          "agent-role",
          Enumerations.SearchParamType.TOKEN,
          "AuditEvent.agent.role"
        ),
        SearchParamDefinition(
          "altid",
          Enumerations.SearchParamType.TOKEN,
          "AuditEvent.agent.altId"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "AuditEvent.recorded"),
        SearchParamDefinition(
          "entity",
          Enumerations.SearchParamType.REFERENCE,
          "AuditEvent.entity.what"
        ),
        SearchParamDefinition(
          "entity-name",
          Enumerations.SearchParamType.STRING,
          "AuditEvent.entity.name"
        ),
        SearchParamDefinition(
          "entity-role",
          Enumerations.SearchParamType.TOKEN,
          "AuditEvent.entity.role"
        ),
        SearchParamDefinition(
          "entity-type",
          Enumerations.SearchParamType.TOKEN,
          "AuditEvent.entity.type"
        ),
        SearchParamDefinition("outcome", Enumerations.SearchParamType.TOKEN, "AuditEvent.outcome"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "AuditEvent.agent.who.where(resolve() is Patient) | AuditEvent.entity.what.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "policy",
          Enumerations.SearchParamType.URI,
          "AuditEvent.agent.policy"
        ),
        SearchParamDefinition("site", Enumerations.SearchParamType.TOKEN, "AuditEvent.source.site"),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.REFERENCE,
          "AuditEvent.source.observer"
        ),
        SearchParamDefinition("subtype", Enumerations.SearchParamType.TOKEN, "AuditEvent.subtype"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "AuditEvent.type"),
      )
    "PaymentReconciliation" ->
      listOf(
        SearchParamDefinition(
          "created",
          Enumerations.SearchParamType.DATE,
          "PaymentReconciliation.created"
        ),
        SearchParamDefinition(
          "disposition",
          Enumerations.SearchParamType.STRING,
          "PaymentReconciliation.disposition"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "PaymentReconciliation.identifier"
        ),
        SearchParamDefinition(
          "outcome",
          Enumerations.SearchParamType.TOKEN,
          "PaymentReconciliation.outcome"
        ),
        SearchParamDefinition(
          "payment-issuer",
          Enumerations.SearchParamType.REFERENCE,
          "PaymentReconciliation.paymentIssuer"
        ),
        SearchParamDefinition(
          "request",
          Enumerations.SearchParamType.REFERENCE,
          "PaymentReconciliation.request"
        ),
        SearchParamDefinition(
          "requestor",
          Enumerations.SearchParamType.REFERENCE,
          "PaymentReconciliation.requestor"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "PaymentReconciliation.status"
        ),
      )
    "Condition" ->
      listOf(
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "Condition.code"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Condition.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Condition.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "abatement-age",
          Enumerations.SearchParamType.QUANTITY,
          "Condition.abatement.as(Age) | Condition.abatement.as(Range)"
        ),
        SearchParamDefinition(
          "abatement-date",
          Enumerations.SearchParamType.DATE,
          "Condition.abatement.as(dateTime) | Condition.abatement.as(Period)"
        ),
        SearchParamDefinition(
          "abatement-string",
          Enumerations.SearchParamType.STRING,
          "Condition.abatement.as(string)"
        ),
        SearchParamDefinition(
          "asserter",
          Enumerations.SearchParamType.REFERENCE,
          "Condition.asserter"
        ),
        SearchParamDefinition(
          "body-site",
          Enumerations.SearchParamType.TOKEN,
          "Condition.bodySite"
        ),
        SearchParamDefinition("category", Enumerations.SearchParamType.TOKEN, "Condition.category"),
        SearchParamDefinition(
          "clinical-status",
          Enumerations.SearchParamType.TOKEN,
          "Condition.clinicalStatus"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Condition.encounter"
        ),
        SearchParamDefinition(
          "evidence",
          Enumerations.SearchParamType.TOKEN,
          "Condition.evidence.code"
        ),
        SearchParamDefinition(
          "evidence-detail",
          Enumerations.SearchParamType.REFERENCE,
          "Condition.evidence.detail"
        ),
        SearchParamDefinition(
          "onset-age",
          Enumerations.SearchParamType.QUANTITY,
          "Condition.onset.as(Age) | Condition.onset.as(Range)"
        ),
        SearchParamDefinition(
          "onset-date",
          Enumerations.SearchParamType.DATE,
          "Condition.onset.as(dateTime) | Condition.onset.as(Period)"
        ),
        SearchParamDefinition(
          "onset-info",
          Enumerations.SearchParamType.STRING,
          "Condition.onset.as(string)"
        ),
        SearchParamDefinition(
          "recorded-date",
          Enumerations.SearchParamType.DATE,
          "Condition.recordedDate"
        ),
        SearchParamDefinition("severity", Enumerations.SearchParamType.TOKEN, "Condition.severity"),
        SearchParamDefinition(
          "stage",
          Enumerations.SearchParamType.TOKEN,
          "Condition.stage.summary"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Condition.subject"
        ),
        SearchParamDefinition(
          "verification-status",
          Enumerations.SearchParamType.TOKEN,
          "Condition.verificationStatus"
        ),
      )
    "SpecimenDefinition" ->
      listOf(
        SearchParamDefinition(
          "container",
          Enumerations.SearchParamType.TOKEN,
          "SpecimenDefinition.typeTested.container.type"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "SpecimenDefinition.identifier"
        ),
        SearchParamDefinition(
          "type",
          Enumerations.SearchParamType.TOKEN,
          "SpecimenDefinition.typeCollected"
        ),
      )
    "Composition" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "Composition.date"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Composition.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Composition.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Composition.type"),
        SearchParamDefinition(
          "attester",
          Enumerations.SearchParamType.REFERENCE,
          "Composition.attester.party"
        ),
        SearchParamDefinition(
          "author",
          Enumerations.SearchParamType.REFERENCE,
          "Composition.author"
        ),
        SearchParamDefinition(
          "category",
          Enumerations.SearchParamType.TOKEN,
          "Composition.category"
        ),
        SearchParamDefinition(
          "confidentiality",
          Enumerations.SearchParamType.TOKEN,
          "Composition.confidentiality"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "Composition.event.code"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Composition.encounter"
        ),
        SearchParamDefinition(
          "entry",
          Enumerations.SearchParamType.REFERENCE,
          "Composition.section.entry"
        ),
        SearchParamDefinition(
          "period",
          Enumerations.SearchParamType.DATE,
          "Composition.event.period"
        ),
        SearchParamDefinition(
          "related-id",
          Enumerations.SearchParamType.TOKEN,
          "(Composition.relatesTo.target as Identifier)"
        ),
        SearchParamDefinition(
          "related-ref",
          Enumerations.SearchParamType.REFERENCE,
          "(Composition.relatesTo.target as Reference)"
        ),
        SearchParamDefinition(
          "section",
          Enumerations.SearchParamType.TOKEN,
          "Composition.section.code"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Composition.status"),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "Composition.subject"
        ),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "Composition.title"),
      )
    "DetectedIssue" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DetectedIssue.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "DetectedIssue.patient"
        ),
        SearchParamDefinition(
          "author",
          Enumerations.SearchParamType.REFERENCE,
          "DetectedIssue.author"
        ),
        SearchParamDefinition("code", Enumerations.SearchParamType.TOKEN, "DetectedIssue.code"),
        SearchParamDefinition(
          "identified",
          Enumerations.SearchParamType.DATE,
          "DetectedIssue.identified"
        ),
        SearchParamDefinition(
          "implicated",
          Enumerations.SearchParamType.REFERENCE,
          "DetectedIssue.implicated"
        ),
      )
    "Bundle" ->
      listOf(
        SearchParamDefinition(
          "composition",
          Enumerations.SearchParamType.REFERENCE,
          "Bundle.entry[0].resource"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Bundle.identifier"
        ),
        SearchParamDefinition(
          "message",
          Enumerations.SearchParamType.REFERENCE,
          "Bundle.entry[0].resource"
        ),
        SearchParamDefinition("timestamp", Enumerations.SearchParamType.DATE, "Bundle.timestamp"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Bundle.type"),
      )
    "CompartmentDefinition" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(CompartmentDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "CompartmentDefinition.useContext.code"
        ),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "CompartmentDefinition.date"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "CompartmentDefinition.description"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "CompartmentDefinition.name"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "CompartmentDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "CompartmentDefinition.status"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "CompartmentDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "CompartmentDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "CompartmentDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "CompartmentDefinition.useContext"
        ),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "CompartmentDefinition.code"
        ),
        SearchParamDefinition(
          "resource",
          Enumerations.SearchParamType.TOKEN,
          "CompartmentDefinition.resource.code"
        ),
      )
    "MedicationKnowledge" ->
      listOf(
        SearchParamDefinition(
          "classification",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.medicineClassification.classification"
        ),
        SearchParamDefinition(
          "classification-type",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.medicineClassification.type"
        ),
        SearchParamDefinition(
          "code",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.code"
        ),
        SearchParamDefinition(
          "doseform",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.doseForm"
        ),
        SearchParamDefinition(
          "ingredient",
          Enumerations.SearchParamType.REFERENCE,
          "(MedicationKnowledge.ingredient.item as Reference)"
        ),
        SearchParamDefinition(
          "ingredient-code",
          Enumerations.SearchParamType.TOKEN,
          "(MedicationKnowledge.ingredient.item as CodeableConcept)"
        ),
        SearchParamDefinition(
          "manufacturer",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationKnowledge.manufacturer"
        ),
        SearchParamDefinition(
          "monitoring-program-name",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.monitoringProgram.name"
        ),
        SearchParamDefinition(
          "monitoring-program-type",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.monitoringProgram.type"
        ),
        SearchParamDefinition(
          "monograph",
          Enumerations.SearchParamType.REFERENCE,
          "MedicationKnowledge.monograph.source"
        ),
        SearchParamDefinition(
          "monograph-type",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.monograph.type"
        ),
        SearchParamDefinition(
          "source-cost",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.cost.source"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "MedicationKnowledge.status"
        ),
      )
    "Patient" ->
      listOf(
        SearchParamDefinition("active", Enumerations.SearchParamType.TOKEN, "Patient.active"),
        SearchParamDefinition("address", Enumerations.SearchParamType.STRING, "Patient.address"),
        SearchParamDefinition(
          "address-city",
          Enumerations.SearchParamType.STRING,
          "Patient.address.city"
        ),
        SearchParamDefinition(
          "address-country",
          Enumerations.SearchParamType.STRING,
          "Patient.address.country"
        ),
        SearchParamDefinition(
          "address-postalcode",
          Enumerations.SearchParamType.STRING,
          "Patient.address.postalCode"
        ),
        SearchParamDefinition(
          "address-state",
          Enumerations.SearchParamType.STRING,
          "Patient.address.state"
        ),
        SearchParamDefinition(
          "address-use",
          Enumerations.SearchParamType.TOKEN,
          "Patient.address.use"
        ),
        SearchParamDefinition("birthdate", Enumerations.SearchParamType.DATE, "Patient.birthDate"),
        SearchParamDefinition(
          "death-date",
          Enumerations.SearchParamType.DATE,
          "(Patient.deceased as dateTime)"
        ),
        SearchParamDefinition(
          "deceased",
          Enumerations.SearchParamType.TOKEN,
          "Patient.deceased.exists() and Patient.deceased != false"
        ),
        SearchParamDefinition(
          "email",
          Enumerations.SearchParamType.TOKEN,
          "Patient.telecom.where(system='email')"
        ),
        SearchParamDefinition("family", Enumerations.SearchParamType.STRING, "Patient.name.family"),
        SearchParamDefinition("gender", Enumerations.SearchParamType.TOKEN, "Patient.gender"),
        SearchParamDefinition(
          "general-practitioner",
          Enumerations.SearchParamType.REFERENCE,
          "Patient.generalPractitioner"
        ),
        SearchParamDefinition("given", Enumerations.SearchParamType.STRING, "Patient.name.given"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Patient.identifier"
        ),
        SearchParamDefinition(
          "language",
          Enumerations.SearchParamType.TOKEN,
          "Patient.communication.language"
        ),
        SearchParamDefinition("link", Enumerations.SearchParamType.REFERENCE, "Patient.link.other"),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "Patient.name"),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "Patient.managingOrganization"
        ),
        SearchParamDefinition(
          "phone",
          Enumerations.SearchParamType.TOKEN,
          "Patient.telecom.where(system='phone')"
        ),
        SearchParamDefinition("phonetic", Enumerations.SearchParamType.STRING, "Patient.name"),
        SearchParamDefinition("telecom", Enumerations.SearchParamType.TOKEN, "Patient.telecom"),
      )
    "Coverage" ->
      listOf(
        SearchParamDefinition(
          "beneficiary",
          Enumerations.SearchParamType.REFERENCE,
          "Coverage.beneficiary"
        ),
        SearchParamDefinition(
          "class-type",
          Enumerations.SearchParamType.TOKEN,
          "Coverage.class.type"
        ),
        SearchParamDefinition(
          "class-value",
          Enumerations.SearchParamType.STRING,
          "Coverage.class.value"
        ),
        SearchParamDefinition(
          "dependent",
          Enumerations.SearchParamType.STRING,
          "Coverage.dependent"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Coverage.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "Coverage.beneficiary"
        ),
        SearchParamDefinition("payor", Enumerations.SearchParamType.REFERENCE, "Coverage.payor"),
        SearchParamDefinition(
          "policy-holder",
          Enumerations.SearchParamType.REFERENCE,
          "Coverage.policyHolder"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Coverage.status"),
        SearchParamDefinition(
          "subscriber",
          Enumerations.SearchParamType.REFERENCE,
          "Coverage.subscriber"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Coverage.type"),
      )
    "QuestionnaireResponse" ->
      listOf(
        SearchParamDefinition(
          "author",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.author"
        ),
        SearchParamDefinition(
          "authored",
          Enumerations.SearchParamType.DATE,
          "QuestionnaireResponse.authored"
        ),
        SearchParamDefinition(
          "based-on",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.basedOn"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.encounter"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "QuestionnaireResponse.identifier"
        ),
        SearchParamDefinition(
          "part-of",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.partOf"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "questionnaire",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.questionnaire"
        ),
        SearchParamDefinition(
          "source",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.source"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "QuestionnaireResponse.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "QuestionnaireResponse.subject"
        ),
      )
    "CoverageEligibilityRequest" ->
      listOf(
        SearchParamDefinition(
          "created",
          Enumerations.SearchParamType.DATE,
          "CoverageEligibilityRequest.created"
        ),
        SearchParamDefinition(
          "enterer",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityRequest.enterer"
        ),
        SearchParamDefinition(
          "facility",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityRequest.facility"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "CoverageEligibilityRequest.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityRequest.patient"
        ),
        SearchParamDefinition(
          "provider",
          Enumerations.SearchParamType.REFERENCE,
          "CoverageEligibilityRequest.provider"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "CoverageEligibilityRequest.status"
        ),
      )
    "NamingSystem" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(NamingSystem.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "NamingSystem.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "NamingSystem.date"),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "NamingSystem.description"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "NamingSystem.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "NamingSystem.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "NamingSystem.publisher"
        ),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "NamingSystem.status"),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "NamingSystem.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "NamingSystem.useContext"
        ),
        SearchParamDefinition(
          "contact",
          Enumerations.SearchParamType.STRING,
          "NamingSystem.contact.name"
        ),
        SearchParamDefinition(
          "id-type",
          Enumerations.SearchParamType.TOKEN,
          "NamingSystem.uniqueId.type"
        ),
        SearchParamDefinition("kind", Enumerations.SearchParamType.TOKEN, "NamingSystem.kind"),
        SearchParamDefinition(
          "period",
          Enumerations.SearchParamType.DATE,
          "NamingSystem.uniqueId.period"
        ),
        SearchParamDefinition(
          "responsible",
          Enumerations.SearchParamType.STRING,
          "NamingSystem.responsible"
        ),
        SearchParamDefinition(
          "telecom",
          Enumerations.SearchParamType.TOKEN,
          "NamingSystem.contact.telecom"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "NamingSystem.type"),
        SearchParamDefinition(
          "value",
          Enumerations.SearchParamType.STRING,
          "NamingSystem.uniqueId.value"
        ),
      )
    "MedicinalProductUndesirableEffect" ->
      listOf(
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicinalProductUndesirableEffect.subject"
        ),
      )
    "ExampleScenario" ->
      listOf(
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(ExampleScenario.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(ExampleScenario.useContext.value as Quantity) | (ExampleScenario.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "ExampleScenario.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ExampleScenario.date"),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ExampleScenario.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "ExampleScenario.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "ExampleScenario.name"),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "ExampleScenario.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ExampleScenario.status"
        ),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "ExampleScenario.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "ExampleScenario.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "ExampleScenario.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "ExampleScenario.useContext"
        ),
      )
    "SupplyDelivery" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "SupplyDelivery.identifier"
        ),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "SupplyDelivery.patient"
        ),
        SearchParamDefinition(
          "receiver",
          Enumerations.SearchParamType.REFERENCE,
          "SupplyDelivery.receiver"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "SupplyDelivery.status"
        ),
        SearchParamDefinition(
          "supplier",
          Enumerations.SearchParamType.REFERENCE,
          "SupplyDelivery.supplier"
        ),
      )
    "Schedule" ->
      listOf(
        SearchParamDefinition("active", Enumerations.SearchParamType.TOKEN, "Schedule.active"),
        SearchParamDefinition("actor", Enumerations.SearchParamType.REFERENCE, "Schedule.actor"),
        SearchParamDefinition(
          "date",
          Enumerations.SearchParamType.DATE,
          "Schedule.planningHorizon"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Schedule.identifier"
        ),
        SearchParamDefinition(
          "service-category",
          Enumerations.SearchParamType.TOKEN,
          "Schedule.serviceCategory"
        ),
        SearchParamDefinition(
          "service-type",
          Enumerations.SearchParamType.TOKEN,
          "Schedule.serviceType"
        ),
        SearchParamDefinition(
          "specialty",
          Enumerations.SearchParamType.TOKEN,
          "Schedule.specialty"
        ),
      )
    "ClinicalImpression" ->
      listOf(
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "ClinicalImpression.date"),
        SearchParamDefinition(
          "patient",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.subject.where(resolve() is Patient)"
        ),
        SearchParamDefinition(
          "assessor",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.assessor"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.encounter"
        ),
        SearchParamDefinition(
          "finding-code",
          Enumerations.SearchParamType.TOKEN,
          "ClinicalImpression.finding.itemCodeableConcept"
        ),
        SearchParamDefinition(
          "finding-ref",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.finding.itemReference"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "ClinicalImpression.identifier"
        ),
        SearchParamDefinition(
          "investigation",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.investigation.item"
        ),
        SearchParamDefinition(
          "previous",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.previous"
        ),
        SearchParamDefinition(
          "problem",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.problem"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "ClinicalImpression.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.subject"
        ),
        SearchParamDefinition(
          "supporting-info",
          Enumerations.SearchParamType.REFERENCE,
          "ClinicalImpression.supportingInfo"
        ),
      )
    "DeviceDefinition" ->
      listOf(
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "DeviceDefinition.identifier"
        ),
        SearchParamDefinition(
          "parent",
          Enumerations.SearchParamType.REFERENCE,
          "DeviceDefinition.parentDevice"
        ),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "DeviceDefinition.type"),
      )
    "PlanDefinition" ->
      listOf(
        SearchParamDefinition(
          "composed-of",
          Enumerations.SearchParamType.REFERENCE,
          "PlanDefinition.relatedArtifact.where(type='composed-of').resource"
        ),
        SearchParamDefinition(
          "context",
          Enumerations.SearchParamType.TOKEN,
          "(PlanDefinition.useContext.value as CodeableConcept)"
        ),
        SearchParamDefinition(
          "context-quantity",
          Enumerations.SearchParamType.QUANTITY,
          "(PlanDefinition.useContext.value as Quantity) | (PlanDefinition.useContext.value as Range)"
        ),
        SearchParamDefinition(
          "context-type",
          Enumerations.SearchParamType.TOKEN,
          "PlanDefinition.useContext.code"
        ),
        SearchParamDefinition("date", Enumerations.SearchParamType.DATE, "PlanDefinition.date"),
        SearchParamDefinition(
          "definition",
          Enumerations.SearchParamType.REFERENCE,
          "PlanDefinition.action.definition"
        ),
        SearchParamDefinition(
          "depends-on",
          Enumerations.SearchParamType.REFERENCE,
          "PlanDefinition.relatedArtifact.where(type='depends-on').resource | PlanDefinition.library"
        ),
        SearchParamDefinition(
          "derived-from",
          Enumerations.SearchParamType.REFERENCE,
          "PlanDefinition.relatedArtifact.where(type='derived-from').resource"
        ),
        SearchParamDefinition(
          "description",
          Enumerations.SearchParamType.STRING,
          "PlanDefinition.description"
        ),
        SearchParamDefinition(
          "effective",
          Enumerations.SearchParamType.DATE,
          "PlanDefinition.effectivePeriod"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "PlanDefinition.identifier"
        ),
        SearchParamDefinition(
          "jurisdiction",
          Enumerations.SearchParamType.TOKEN,
          "PlanDefinition.jurisdiction"
        ),
        SearchParamDefinition("name", Enumerations.SearchParamType.STRING, "PlanDefinition.name"),
        SearchParamDefinition(
          "predecessor",
          Enumerations.SearchParamType.REFERENCE,
          "PlanDefinition.relatedArtifact.where(type='predecessor').resource"
        ),
        SearchParamDefinition(
          "publisher",
          Enumerations.SearchParamType.STRING,
          "PlanDefinition.publisher"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "PlanDefinition.status"
        ),
        SearchParamDefinition(
          "successor",
          Enumerations.SearchParamType.REFERENCE,
          "PlanDefinition.relatedArtifact.where(type='successor').resource"
        ),
        SearchParamDefinition("title", Enumerations.SearchParamType.STRING, "PlanDefinition.title"),
        SearchParamDefinition("topic", Enumerations.SearchParamType.TOKEN, "PlanDefinition.topic"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "PlanDefinition.type"),
        SearchParamDefinition("url", Enumerations.SearchParamType.URI, "PlanDefinition.url"),
        SearchParamDefinition(
          "version",
          Enumerations.SearchParamType.TOKEN,
          "PlanDefinition.version"
        ),
        SearchParamDefinition(
          "context-type-quantity",
          Enumerations.SearchParamType.COMPOSITE,
          "PlanDefinition.useContext"
        ),
        SearchParamDefinition(
          "context-type-value",
          Enumerations.SearchParamType.COMPOSITE,
          "PlanDefinition.useContext"
        ),
      )
    "MedicinalProductAuthorization" ->
      listOf(
        SearchParamDefinition(
          "country",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProductAuthorization.country"
        ),
        SearchParamDefinition(
          "holder",
          Enumerations.SearchParamType.REFERENCE,
          "MedicinalProductAuthorization.holder"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProductAuthorization.identifier"
        ),
        SearchParamDefinition(
          "status",
          Enumerations.SearchParamType.TOKEN,
          "MedicinalProductAuthorization.status"
        ),
        SearchParamDefinition(
          "subject",
          Enumerations.SearchParamType.REFERENCE,
          "MedicinalProductAuthorization.subject"
        ),
      )
    "Claim" ->
      listOf(
        SearchParamDefinition(
          "care-team",
          Enumerations.SearchParamType.REFERENCE,
          "Claim.careTeam.provider"
        ),
        SearchParamDefinition("created", Enumerations.SearchParamType.DATE, "Claim.created"),
        SearchParamDefinition(
          "detail-udi",
          Enumerations.SearchParamType.REFERENCE,
          "Claim.item.detail.udi"
        ),
        SearchParamDefinition(
          "encounter",
          Enumerations.SearchParamType.REFERENCE,
          "Claim.item.encounter"
        ),
        SearchParamDefinition("enterer", Enumerations.SearchParamType.REFERENCE, "Claim.enterer"),
        SearchParamDefinition("facility", Enumerations.SearchParamType.REFERENCE, "Claim.facility"),
        SearchParamDefinition("identifier", Enumerations.SearchParamType.TOKEN, "Claim.identifier"),
        SearchParamDefinition("insurer", Enumerations.SearchParamType.REFERENCE, "Claim.insurer"),
        SearchParamDefinition("item-udi", Enumerations.SearchParamType.REFERENCE, "Claim.item.udi"),
        SearchParamDefinition("patient", Enumerations.SearchParamType.REFERENCE, "Claim.patient"),
        SearchParamDefinition("payee", Enumerations.SearchParamType.REFERENCE, "Claim.payee.party"),
        SearchParamDefinition("priority", Enumerations.SearchParamType.TOKEN, "Claim.priority"),
        SearchParamDefinition(
          "procedure-udi",
          Enumerations.SearchParamType.REFERENCE,
          "Claim.procedure.udi"
        ),
        SearchParamDefinition("provider", Enumerations.SearchParamType.REFERENCE, "Claim.provider"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Claim.status"),
        SearchParamDefinition(
          "subdetail-udi",
          Enumerations.SearchParamType.REFERENCE,
          "Claim.item.detail.subDetail.udi"
        ),
        SearchParamDefinition("use", Enumerations.SearchParamType.TOKEN, "Claim.use"),
      )
    "Location" ->
      listOf(
        SearchParamDefinition("address", Enumerations.SearchParamType.STRING, "Location.address"),
        SearchParamDefinition(
          "address-city",
          Enumerations.SearchParamType.STRING,
          "Location.address.city"
        ),
        SearchParamDefinition(
          "address-country",
          Enumerations.SearchParamType.STRING,
          "Location.address.country"
        ),
        SearchParamDefinition(
          "address-postalcode",
          Enumerations.SearchParamType.STRING,
          "Location.address.postalCode"
        ),
        SearchParamDefinition(
          "address-state",
          Enumerations.SearchParamType.STRING,
          "Location.address.state"
        ),
        SearchParamDefinition(
          "address-use",
          Enumerations.SearchParamType.TOKEN,
          "Location.address.use"
        ),
        SearchParamDefinition(
          "endpoint",
          Enumerations.SearchParamType.REFERENCE,
          "Location.endpoint"
        ),
        SearchParamDefinition(
          "identifier",
          Enumerations.SearchParamType.TOKEN,
          "Location.identifier"
        ),
        SearchParamDefinition(
          "name",
          Enumerations.SearchParamType.STRING,
          "Location.name | Location.alias"
        ),
        SearchParamDefinition("near", Enumerations.SearchParamType.SPECIAL, "Location.position"),
        SearchParamDefinition(
          "operational-status",
          Enumerations.SearchParamType.TOKEN,
          "Location.operationalStatus"
        ),
        SearchParamDefinition(
          "organization",
          Enumerations.SearchParamType.REFERENCE,
          "Location.managingOrganization"
        ),
        SearchParamDefinition("partof", Enumerations.SearchParamType.REFERENCE, "Location.partOf"),
        SearchParamDefinition("status", Enumerations.SearchParamType.TOKEN, "Location.status"),
        SearchParamDefinition("type", Enumerations.SearchParamType.TOKEN, "Location.type"),
      )
    else -> emptyList()
  }
